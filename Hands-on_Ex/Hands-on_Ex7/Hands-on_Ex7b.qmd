---
title: "Hands-on Exercise 7b: Visualising Geospatial Point Data"
date: February 29,2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
  message: false
code-fold: false
code-summary: "Show the code"
---

# 1 Getting Started

The code chunk below uses `p_load()` of pacman package to check if these packages are installed in the computer and load them onto your working R environment.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

# 2 Geospatial Data Wrangling

## 2.1 The data

The data set use for this hands-on exercise is called *SGPools_svy21*. The data is in csv file format.

Figure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in [Singapore SVY21 Projected Coordinates System](https://www.sla.gov.sg/sirent/CoordinateSystems.aspx).

![](images/clipboard-2477304374.png)

## 2.2 **Data Import and Preparation**

The code chunk below uses *read_csv()* function of **readr** package to import *SGPools_svy21.csv* into R as a tibble data frame called *sgpools*.

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

The code chunk below shows list() is used to examine if the data file has been imported correctly.

```{r}
list(sgpools)
```

## 2.3 Creating a sf data frame from an aspatial data frame

The code chunk below converts sgpools data frame into a simple feature data frame by using *st_as_sf()* of **sf** packages

```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs= 3414)
```

::: callout-tip
## Things to learn from the arguments above

-   The *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   The *crs* argument required you to provide the coordinates system in epsg format. [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to [epsg.io](https://epsg.io/).
:::

Figure below shows the data table of *sgpools_sf*. Notice that a new column called geometry has been added into the data frame.

![](images/clipboard-2663087769.png)

You can display the basic information of the newly created *sgpools_sf* by using the code chunk below.

```{r}
list(sgpools_sf)
```

The output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data.

# 3 Drawing Proportional Symbol Map

To create an interactive proportional symbol map in R, the view mode of tmap will be used.

The code chunk below will turn on the interactive mode of tmap.

```{r}
tmap_mode("view")
```

## 3.1 It all started with an interactive point symbol map

The code chunks below are used to create an interactive point symbol map.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "red",
           size = 1,
           border.col = "black",
           border.lwd = 1)
```

## 3.2 Lets make it proportional

To draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable *Gp1Gp2Winnings* is assigned to size visual attribute.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "red",
           size = "Gp1Gp2 Winnings",
           border.col = "black",
           border.lwd = 1)
```

## 3.3 Lets give it a different colour

The proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, *OUTLET_TYPE* variable is used as the colour attribute variable.

```{r}
tm_shape(sgpools_sf)+
tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1)
```

## 3.4 I have a twin brothers :)

An impressive and little-know feature of **tmap**’s view mode is that it also works with faceted plots. The argument *sync* in *tm_facets()* can be used in this case to produce multiple maps with synchronised zoom and pan settings.

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```
To switch tmap’s Viewer back to plot mode, we need to use the code chunk below.
```{r}
tmap_mode("plot")
```
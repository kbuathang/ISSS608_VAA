---
title: "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R"
date: January 24,2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
code-fold: true
code-summary: "Show the code"
---

# 1 Getting Started

::: panel-tabset
## Loading R package

In this exercise, we will use the following our R packages.

-   [ggiraph](https://davidgohel.github.io/ggiraph/): for making ‘ggplot’ graphics interactive.

-   [plotly](https://plotly.com/r/), R library for plotting interactive statistical graphs.

[DT](https://rstudio.github.io/DT/) provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page. [tidyverse](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs. [patchwork](https://patchwork.data-imaginist.com/) for combining multiple ggplot2 graphs into one figure.

The code chunk below uses `p_load()` of pacman package to check if these packages are installed in the computer and load them onto your working R environment.

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```

## Importing Data

The code chunk below imports exam_data.csv into R environment by using `read_csv()` function of [readr](https://readr.tidyverse.org/) package.

```{r}
exam_data <- read.csv("data/Exam_data.csv")
```

## Summarizing Data

The code chunk below uses `summary()`to summarize the data.

```{r}
summary(exam_data)
```
:::

# 2 Interactive7 Data Visualisation - ggiraph methods

[ggiraph](https://davidgohel.github.io/ggiraph/) is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [ggplot geometries](https://davidgohel.github.io/ggiraph/reference/#section-interactive-geometries) that can understand three arguments:

-   **Tooltip**: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.

-   **Onclick**: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.

-   **Data_id**: a column of data-sets that contain an id to be associated with elements.

When using within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.

## 2.1 Tooltip effect with tooltip aesthetic
The below code chunk uses **ggiraph** to plot an interactive statistical graph.
It consists of two parts. First, an ggplot object will be created. Next, `girafe()` of **ggiraph** will be used to create an interactive svg object.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot",
    fill = "#AB1858") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
::: callout-Note
First, an interactive version of ggplot2 geom (i.e. [geom_dotplot_interactive()](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph. Then, [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.
::: 

## 2.2 Interactivity
The student’s ID will be displayed when you hover the mouse pointer on data point of interest.
```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot",
    fill = "#AB1858") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)

```









---
title: "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods"
date: January 1,2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
code-fold: true
code-summary: "Show the code"
---

# 1 Getting Started

::: panel-tabset
## Loading R package

The code chunk below uses `p_load()` of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing Data

The code chunk below imports exam_data.csv into R environment by using `read_csv()` function of readr package.

```{r}
exam_data <- read.csv("data/Exam_data.csv")
```

## Summarizing Data

The code chunk below uses `summary()`to summarize the data.

```{r}
summary(exam_data)
```

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE
:::

# 2 R Graphics VS ggplot

::: panel-tabset
## R Graphics

```{r}
hist(exam_data$MATHS,
     main = "Distribution of Maths Scores",
     xlab = "MATHS",
     col = "#FF9999",
     border= "white")
```

## ggplot2

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="white", 
                 fill="#FF9999") +
  ggtitle("Distribution of Maths scores")
```
:::

According to [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157), the transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.

# 3 Essential Grammatical Elements in ggplot2: geom

Geometric objects are the actual marks we put on a plot. Examples include:

-   `geom_point()` for drawing individual points (e.g., a scatter plot)

-   `geom_line()` for drawing lines (e.g., for a line charts)

-   `geom_smooth()` for drawing smoothed lines (e.g., for simple trends or approximations)

-   `geom_bar()` for drawing bars (e.g., for bar charts)

-   `geom_histogram()` for drawing binned values (e.g. a histogram)

-   `geom_polygon()` for drawing arbitrary shapes

-   `geom_map()` for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

    ![](picture/geom.jpg)

-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.

-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms)

## geom_bar

The code chunk below plots a bar chart by using [geom_bar(.)](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar(fill="#FF9999")
```

## geom_dotplot

In the code chunk below, [geom_dotplot()](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) of ggplot2 is used to plot a dot plot.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,
               dotsize = 0.5,
               fill="#FF9999")+
  scale_y_continuous(NULL,           
                     breaks = NULL) 
```

For above `geom_dotplot()`, we use two arguments.

-   *binwidth argument* is used to change the binwidth to 2.5., and

-   `scale_y_continuous()` is used to turn off the y-axis by setting to NULL.

## geom_histogram

In the code chunk below, [geom_histogram()](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in MATHS field of exam_data.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20,            
                 color="black",      
                 fill="#FF9999")  
```

For above `geom_histogram()`,we use three arguments.

-   *bins argument* is used to change the number of bins to 20,

-   *fill argument* is used to shade the histogram with light pink color, and

-   *color argument* is used to change the outline colour of the bars in black.

## Modifying a geometric object by changing aes()

The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of `aesthetic()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")+
  scale_fill_manual(values = c("#FFCC99","#FF9999"))
```

## geom-density

[geom-density()](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code chunk below plots two kernel density lines by using colour or fill arguments of `aes()`

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density(linewidth = 1)+
  scale_colour_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))
```

## geom-boxplot

[geom_boxplot()](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

The code chunk below plots boxplots by using `geom_boxplot()`.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,
           x= GENDER,fill = GENDER)) +
  geom_boxplot(notch=TRUE)+scale_fill_manual(values = c("Female"="#FFCC99","Male"="#FF9999")) 
```

## geom_violin

[geom_violin](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER,fill = GENDER)) +
  geom_violin()+scale_fill_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))
```

## geom_point()

[geom_point()](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot. The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH,colour= GENDER)) +
  geom_point()+scale_colour_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))
```

## geom objects can be combined

The code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER,fill= GENDER)) +
  geom_boxplot() + scale_fill_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))+     geom_point(position="jitter", 
             size = 0.5)        
```

# 4 Essential Grammatical Elements in ggplot2: stat

The [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)

    -   a mean

    -   a confidence limit

## the `stat_summary()` method

The code chunk below adds mean values by using [stat_summary()](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER,fill= GENDER)) +
  geom_boxplot() + scale_fill_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))+
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="red",        
               size=4)               
```

## the `geom()` method

The code chunk below adding mean values by using `geom_()` function and overriding the default stat.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER,fill= GENDER)) +
  geom_boxplot() + scale_fill_manual(values = c("Female"="#FFCC99","Male"="#FF9999"))+
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4)          
```

## Scatter Plot - geom_point()

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point( colour ="red") 
```

In the code chunk below, [geom_smooth()](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point( colour ="red") +
  geom_smooth(size=0.5)
```

The default smoothing method can be overridden as shown below.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point(colour ="red") +
  geom_smooth(method=lm, 
              size=0.5)
```

# 5 Essential Grammatical Elements in ggplot2: Facets

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: `facet_grid()` and `facet_wrap()`.

## `facet_wrap()` function

[facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using `facet-wrap()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

## `facet_grid()` function

[facet_grid()](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot using `facet_grid()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

# 6 Essential Grammatical Elements in ggplot2: Coordinates

The *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use

## Working with Coordinate

By the default, the bar chart of ggplot2 is in vertical form.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

## Changing the y- and x-axis range

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

# 7 Essential Grammatical Elements in ggplot2: themes

Themes control elements of the graph not related to the data. A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

::: panel-tabset
## Gray

The code chunk below plot a horizontal bar chart using `theme_gray()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

## Classic

A horizontal bar chart plotted using `theme_classic()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

## Minimal

A horizontal bar chart plotted using `theme_minimal()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
:::

[
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "The purpose of this exercise is to enhance the original visualization created by a classmate. The focus will be based on the improvement in its clarity and aesthetics."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#installing-r-packages",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#installing-r-packages",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.1 Installing R packages",
    "text": "2.1 Installing R packages\nThe code chunk below uses p_load() of pacman package to check if multiple packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse, haven, ggrepel, patchwork,ggplot2, \n               ggthemes, hrbrthemes,dplyr,tidyr,knitr,ggridges)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#importing-data",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.2 Importing Data",
    "text": "2.2 Importing Data\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% \n  filter(CNT ==\"SGP\")\n\n# Include additional variable which is \"school type:STRATUM\" \nRelated_math_read_scie_data &lt;- stu_qqq_SG %&gt;%\n  select(contains(c(\"ID\",\"ST004D01T\",\"math\", \"read\", \"scie\",\"ST259Q01JA\",\n                    \"ST259Q02JA\",\"ST005Q01JA\",\"ST007Q01JA\",\"STRATUM\")))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#wrangling-data",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#wrangling-data",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "2.3 Wrangling Data",
    "text": "2.3 Wrangling Data\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvMATH = rowMeans(select(., ends_with(\"Math\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvREAD = rowMeans(select(., ends_with(\"READ\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(avg_pvSCIE = rowMeans(select(., ends_with(\"SCIE\")), na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvMATH_school = mean(avg_pvMATH, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvREAD_school = mean(avg_pvREAD, na.rm = TRUE))\n\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;% \n  group_by(CNTSCHID) %&gt;%\n  mutate(avg_pvSCIE_school = mean(avg_pvSCIE, na.rm = TRUE))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#distributions-of-mathsreadscience",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#distributions-of-mathsreadscience",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.1 Distributions of Maths/Read/Science",
    "text": "3.1 Distributions of Maths/Read/Science\n\nOriginal Design\nThe histograms below are designed to reveal the distribution of performance across subjects.\n\n\nCode\np1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvMATH)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvMATH), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvREAD)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvREAD), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  geom_vline(aes(xintercept = median(avg_pvSCIE)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = median(Related_math_read_scie_data$avg_pvSCIE), y = 30, \n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"red\") +\n  labs(y = \"Count\")\n\np1 + p2 + p3 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"Distributions of Maths/Reading/Science with Median Lines\", tag_levels = \"I\")\n\n\n\n\n\n\n\nCritique\nIn this section, feedback on original visualization is provided along with suggestions for improvement.\n\n\n\n\n\n\n\n\nCriteria\nOriginal Design\nProposed Design\n\n\n\n\nClarity\n\nThe graph is suitable to reveal the distribution of subjects’ scores.\nThe axis titles are not labeled clearly.\nThe tag (I , II,III) is provided to differentiate each graph but it could be more descriptive.\nAnnotation of the median and the dashed lines are included. This provides more insight about the graph.\n\nTo enhance the visualization in terms of clarity, I would recommend the following:\n\nChange the main title to be more concise and put in the middle\nChange the name of axis titles to be clearer\nBe more specific about the tag by including subjects\nAdd the mean and remain the median to indicate skewness.\nInclude box plots the show outliers and the overall distribution more effectively\n\n\n\nAesthetics\n\nThe arrangement of three plots is clear and enables to compare distribution across subjects.\nThe colors used for the histogram bars and the background are similar. This could reduce visual contrast.\nThe scales on the axes are not aligned across all graphs.\nAnnotation is overlapped with the bars. This makes them hard to read.\n\nFor better aesthetics in the graphs, the following improvements are recommended:\n\nUse a different color for each bars to differentiate between subjects and make sure that those colors are contrast with background as well\nAlign the scale of x-axis and y-axis for all graphs\nShift annotations to a place where they can be seen clearly\n\n\n\n\n\n\nSketch\nA sketch for proposed design is shown as below.\n\n\n\nRemake\n\n\nCode\n#math scores\np1 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvMATH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#FBD1D5\") +\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  geom_vline(aes(xintercept = median(avg_pvMATH)), color = \"red\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 800, y = 1800,\n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"red\",size= 6) +\n  geom_vline(aes(xintercept = mean(avg_pvMATH)), color = \"blue\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 400, y = 1800,\n           label = paste(\"Mean:\", round(mean(Related_math_read_scie_data$avg_pvMATH), 2)), \n           vjust = 1, color = \"blue\",size= 6) +\n  labs(y = \"No.of Students\", x= \"Average Math Scores\")+\n  ggtitle(\"I: Math\")+\n    geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               alpha = 0.8,\n               outlier.size = 1.5,\n               position = position_nudge(y = -55))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18)) \n\n#Reading scores\np2 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvREAD)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#E0E994\") +\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  geom_vline(aes(xintercept = median(avg_pvREAD)), color = \"red\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 850, y = 1800,\n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"red\",size= 6) +\n  geom_vline(aes(xintercept = mean(avg_pvREAD)), color = \"blue\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 300, y = 1800,\n           label = paste(\"Mean:\", round(mean(Related_math_read_scie_data$avg_pvREAD), 2)), \n           vjust = 1, color = \"blue\",size= 6) +\n  labs(y = \"No.of Students\", x= \"Average Reading Scores\")+\n  ggtitle(\"II: Reading\")+\n    geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               alpha = 0.8,\n               outlier.size = 1.5,\n               position = position_nudge(y = -55))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18))  \n\n#Science scores\np3 &lt;- ggplot(data=Related_math_read_scie_data, aes(x = avg_pvSCIE)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#F8DC88\") +\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  geom_vline(aes(xintercept = median(avg_pvSCIE)), color = \"red\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 800, y = 1800,\n           label = paste(\"Median:\", round(median(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"red\",size= 6) +\n  geom_vline(aes(xintercept = mean(avg_pvSCIE)), color = \"blue\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = 350, y = 1800,\n           label = paste(\"Mean:\", round(mean(Related_math_read_scie_data$avg_pvSCIE), 2)), \n           vjust = 1, color = \"blue\",size= 6) +\n  labs(y = \"No.of Students\", x= \"Average Science Scores\")+\n  ggtitle(\"III: Science\")+\n    geom_boxplot(width = 50,\n               fill = \"white\", \n               color = \"black\",\n               alpha = 0.4,\n               outlier.size = 1.5,\n               position = position_nudge(y = -55))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18)) \n\n\npatchwork &lt;- (p1+p2+p3) &\n  plot_annotation(title = \"Distributions of Performances across Subjects\",\n  theme = theme(plot.title = element_text(size = 26, \n                                          face = \"bold\",\n                                          hjust= 0.5, \n                                          margin = margin(t = 20, b = 20))))\n\npatchwork\n\n\n\n\n\n\n\n\n\n\n\nThe remake design displays the title “Distributions of Performances Across Subjects.” The x-axis is labeled as “Average [subject] Scores,” while the y-axis is labeled as “No. of Students.” Each graph is tagged with the relevant subject for clearer differentiation. Additionally, annotations and lines of the mean are included to indicate skewness. If the mean is to the left of the median, it implies a left-skewed distribution. Horizontal boxplots are included to present outliers and the overall distribution more effectively. The color bars of each graph are different and contrast well with the background. Both the x-axis and y-axis scales start at zero. Annotations are placed on the top and next to the dashed line. There are no overlap with other components. These improvement make the graph clearer and provide more useful insights of the data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-gender-and-performances",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-gender-and-performances",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.2 The Relationship between Gender and Performances",
    "text": "3.2 The Relationship between Gender and Performances\n\nOriginal Design\nThe histograms below are designed to reveal the relationship between gender and performances across subjects.\n\n\nCode\np4 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvMATH, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvMATH\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np5 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvREAD, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvREAD\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np6 &lt;- ggplot(data = Related_math_read_scie_data, aes(x = avg_pvSCIE, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, color = \"grey30\", position = \"identity\", alpha = 0.7) +\n  labs(x = \"avg_pvSCIE\", y = \"Count\", fill = \"Gender\") +\n  scale_fill_manual(values = c(\"skyblue\", \"pink\"))\n\np4 + p5 + p6 +\n  plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between Gender and Performances\", tag_levels = \"I\")\n\n\n\n\n\n\n\nCritique\nIn this section, feedback on original visualization is provided along with suggestions for improvement.\n\n\n\n\n\n\n\n\nCriteria\nOriginal Design\nProposed Design\n\n\n\n\nClarity\n\nThe main title clear states the purpose the graph.\nThe graph tends to show the distribution of gender for each subject, but the overlapping bar make it difficult to distinguish between gender.\nThe axis titles are not labeled clearly.\nThe tag (I , II,III) is provided to differentiate each graph but it could be more descriptive.\nThe legend is not identified clearly. Using 1 and 2 may cause a confusion regarding which gender is referred to.\nThe color coding for gender could lead to misunderstanding. According to the data, “1” refers female and “2” refers male, but the blue color is assigned to 1 and pink to 2.\n\nTo enhance the visualization in terms of clarity, I would recommend the following:\n\nSeparate the female and male graph but each graph has the overall subject distribution to illustrate which each gender’s contribution is better and place it side by side for easy comparison\nUse blue color for male and pink for female to avoid confusion\nPlace the main title in the middle\nChange the name of axis titles to be clearer\nBe more specific about the tag by including subjects\nModify the legend to clearly indicate gender and avoid number indicators that can cause confusion\n\n\n\nAesthetics\n\nThe overall arrangement of three plots is clear and allow easy comparison.\nThe scales on the axes are not aligned across all graphs.\n\nFor better aesthetics in the graphs, the following improvements are recommended:\n\nApply gray color for overall subject distribution to differentiate the distribution of males and females more effectively\nAlign the scale of x-axis and y-axis for all graphs\n\n\n\n\n\n\nSketch\nA sketch for proposed design is shown as below.\n\n\n\nRemake\n\n\nCode\n#Math scores\nMath_data &lt;- Related_math_read_scie_data[\"avg_pvMATH\"]\np1 &lt;- ggplot(data = Related_math_read_scie_data, \n       aes(x = avg_pvMATH, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, data= Math_data, fill = \"#616161\", alpha = 0.8) +\n  geom_histogram(bins=10, color=\"black\") + \n  facet_wrap(~ ST004D01T)+\n  labs(y = \"No.of Students\", x= \"Average Math Scores\", fill=\"Gender\")+\n  ggtitle(\"I: Math\")+ \n  scale_fill_manual(values = c(\"pink\", \"skyblue\"),\n                    labels = c(\"Female\", \"Male\"))+\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18),\n  legend.text = element_text(size = 12),  \n  legend.title = element_text(size = 14),\n  strip.text = element_blank())\n\n#Reading scores\nReading_data &lt;- Related_math_read_scie_data[\"avg_pvREAD\"]\np2 &lt;-ggplot(data = Related_math_read_scie_data, \n       aes(x = avg_pvREAD, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, data= Reading_data, fill = \"#616161\", alpha = 0.8) +\n  geom_histogram(bins=10, color=\"black\") + \n  facet_wrap(~ ST004D01T)+\n  labs(y = \"No.of Students\", x= \"Average Reading Scores\", fill=\"Gender\")+\n  ggtitle(\"II: Reading\")+ \n  scale_fill_manual(values = c(\"pink\", \"skyblue\"),\n                    labels = c(\"Female\", \"Male\"))+\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18),\n  legend.text = element_text(size = 12),  \n  legend.title = element_text(size = 14),\n  strip.text = element_blank())\n\n#Science scores\nScience_data &lt;- Related_math_read_scie_data[\"avg_pvSCIE\"]\np3 &lt;-ggplot(data = Related_math_read_scie_data, \n       aes(x = avg_pvSCIE, fill = factor(ST004D01T))) +\n  geom_histogram(bins = 10, data= Science_data, fill = \"#616161\", alpha = 0.8) +\n  geom_histogram(bins=10, color=\"black\") + \n  facet_wrap(~ ST004D01T)+\n  labs(y = \"No.of Students\", x= \"Average Science Scores\", fill=\"Gender\")+\n  ggtitle(\"III: Science\")+ \n  scale_fill_manual(values = c(\"pink\", \"skyblue\"),\n                    labels = c(\"Female\", \"Male\"))+\n  coord_cartesian(xlim=c(0,1000),ylim = c(0,1900))+\n  theme(plot.title = element_text(size = 22),\n  axis.title = element_text(size = 20),\n  axis.text = element_text(size = 18),\n  legend.text = element_text(size = 12),  \n  legend.title = element_text(size = 14),\n  strip.text = element_blank())\n\npatchwork2 &lt;- (p1/p2/p3) &\n  plot_annotation(title = \"The Relationship between Gender and Performances\",\n  theme = theme(plot.title = element_text(size = 26, \n                                          face = \"bold\",\n                                          hjust= 0.5, \n                                          margin = margin(t = 20, b = 20))))\n\npatchwork2\n\n\n\n\n\n\n\n\n\n\n\nThe redesigned plots illustrates the relationship between gender and performance. By placing the graphs for each gender side by side, it becomes easier to compare their performance in each subject. It is clearer and not overlapped. The x-axis is labeled as “Average [subject] Scores,” while the y-axis is labeled as “No. of Students.” Each graph is tagged with the relevant subject for clearer differentiation. Also, the title is shift into the middle. Furthermore, the legend has been modified to represent “1” as female and “2” as male. Also, blue is used represent males and pink for females. Each graph uses a grey color for overall subject distribution to distinguish more effectively. The scales of the x-axis and y-axis are consistently aligned across all graphs. These enhancements make the graph clearer and effectively highlight the performance relationship as the graphs show that the distribution for males in math and science is slightly more right-skewed compared to that of females. This implies that males tend to perform better in these subject than females."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-school-and-performances",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-school-and-performances",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.3 The Relationship between School and Performances",
    "text": "3.3 The Relationship between School and Performances\n\nOriginal Design\nThe scatter plots below are designed to reveal the correlation between school and performances across subjects.\n\n\nCode\np7 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvMATH_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Maths\")\n\np8 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvREAD_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +\n  labs(x = \"School ID\", y = \"Average PV Read\")\n\np9 &lt;- ggplot(data = Related_math_read_scie_data, \n             aes(x = CNTSCHID, \n                 y = avg_pvSCIE_school)) +\n  geom_point() +\n  geom_smooth(formula = y~x, method = lm, \n              size = 0.5) +  \n  labs(x = \"School ID\", y = \"Average PV Scie\")\n\np7 + p8 + p9 +\n    plot_layout(guides = \"collect\") +\n  plot_annotation(title = \"The Relationship between School and Performances\", tag_levels = \"I\")\n\n\n\n\n\n\n\nCritique\nIn this section, feedback on original visualization is provided along with suggestions for improvement.\n\n\n\n\n\n\n\n\nCriteria\nOriginal Design\nProposed Design\n\n\n\n\nClarity\n\nThe main title clear states the purpose the plot.\nThe scatter plots does not reveal any explicit insights about the relationship between school and performances.\nThe y-axis title is not labeled clearly.\nThe tag (I , II,III) is provided to differentiate each graph but it could be more descriptive.\n\nTo enhance the visualization in terms of clarity, I would recommend the following:\n\nUse another variable which is type of school instead of school ID for better insight about the data\nUse boxplots instead of scatter plots since there are only two type of schools, so it is easier to compare.\nPlace the main title in the middle\nChange the name of y-axis title to be clearer\nBe more specific about the tag by including subjects\n\n\n\nAesthetics\n\nThe x-axis text is overlapped.\nThe scales on the axes are not aligned across all graphs.\n\nFor better aesthetics in the graphs, the following improvements are recommended:\n\nAlign the scale of x-axis and y-axis for all graphs\nUse different color for boxplots to identify each school type.\n\n\n\n\n\n\nSketch\nA sketch for proposed design is shown as below.\n\n\n\nRemake\n\n\nCode\n#Recode school types\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(STRATUM = recode(STRATUM,\n                         \"SGP01\" = \"Public School\",\n                         \"SGP03\" = \"Private School\"))\n\n#Math scores\np1 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvMATH, x=STRATUM,fill=STRATUM)) +\n  geom_boxplot()+\n  coord_cartesian(ylim = c(0,900))+\n  theme(legend.position = \"none\")+\n  scale_fill_manual(values = c(\"#F9B757\", \"#AFD583\"),\n                    labels = c(\"Private School\", \"Public School\"))+\n  labs(y = \"Average Math Scores\", x= \"School Type\", fill=\"School Type\")+\n  ggtitle(\"I: Math\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title.y = element_text(size = 24),\n          axis.title.x = element_blank(),\n          axis.text= element_text(size = 24))\n\n#Reading scores\np2 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvREAD, x=STRATUM,fill=STRATUM)) +\n  geom_boxplot()+\n  coord_cartesian(ylim = c(0,900))+\n  theme(legend.position = \"none\")+\n  scale_fill_manual(values = c(\"#F9B757\", \"#AFD583\"),\n                    labels = c(\"Private School\", \"Public School\"))+\n  labs(y = \"Average Reading Scores\", x= \"School Type\", fill=\"School Type\")+\n  ggtitle(\"II: Reading\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title.y = element_text(size = 24),\n          axis.title.x = element_blank(),\n          axis.text= element_text(size = 24))\n\n#Science scores\np3 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvSCIE, x=STRATUM,fill=STRATUM)) +\n  geom_boxplot()+\n  coord_cartesian(ylim = c(0,900))+\n  scale_fill_manual(values = c(\"#F9B757\", \"#AFD583\"),\n                    labels = c(\"Private School\", \"Public School\"))+\n  labs(y = \"Average Science Scores\", x= \"School Type\", fill=\"School Type\")+\n  ggtitle(\"III: Science\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title.y = element_text(size = 24),\n          axis.title.x = element_blank(),\n          axis.text= element_text(size = 24),\n          legend.text = element_text(size = 18),  \n          legend.title = element_text(size = 18),\n          legend.key.size = unit(1, \"cm\"))\n\npatchwork3 &lt;- (p1+p2+p3) &\n  plot_annotation(title = \"The Relationship between School and Performances\",\n  theme = theme(plot.title = element_text(size = 30, \n                                          face = \"bold\",\n                                          hjust= 0.5, \n                                          margin = margin(t = 20, b = 20))))\npatchwork3\n\n\n\n\n\n\n\n\n\n\n\nThe redesigned plots illustrates the relationship between school type and performance. Instead of school ID, type of school variable is used. Moreover, the boxplots are used instead of scatter plots because there are only two school type. The y-axis is labeled as “Average [subject] Scores”, and x-axis is no longer overlapped. Each graph is tagged with the relevant subject for clearer differentiation, and the title is shift to the middle. Furthermore, the scales of the x-axis and y-axis are consistently aligned across all graph and different colors are used to differentiate school type. These enhancements provide more explicit insights about the relationship between school and performances. It clearly reveals that private school tend to performance better than public school."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-socioeconomic-status-and-performances",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#the-relationship-between-socioeconomic-status-and-performances",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "3.4 The Relationship between Socioeconomic Status and Performances",
    "text": "3.4 The Relationship between Socioeconomic Status and Performances\n\nOriginal Design\nThe scatter plots below are designed to reveal the relationship between socioeconomic status and performances across subjects.\n\n\nCode\nRelated_math_read_scie_data &lt;- Related_math_read_scie_data %&gt;%\n  mutate(Parent_Edu_level = ST005Q01JA + ST007Q01JA)\n\ndf &lt;- Related_math_read_scie_data\n\nggplot(df, aes(x = Parent_Edu_level)) +\n  geom_point(aes(y = avg_pvMATH, color = \"Math\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvMATH, color = \"Math\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  geom_point(aes(y = avg_pvREAD, color = \"Read\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvREAD, color = \"Read\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  geom_point(aes(y = avg_pvSCIE, color = \"Science\"), na.rm = TRUE) +\n  geom_smooth(aes(y = avg_pvSCIE, color = \"Science\"), method = \"lm\", se = FALSE, na.rm = TRUE) +\n  labs(title = \"Relationship between Performance and Socioeconomic Status\",\n       x = \"Socioeconomic Status (Lower values indicate higher status)\",\n       y = \"Average PV Score\") +\n  scale_color_manual(values = c(\"Math\" = \"blue\", \"Read\" = \"green\", \"Science\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\nCritique\nIn this section, feedback on original visualization is provided along with suggestions for improvement.\n\n\n\n\n\n\n\n\nCriteria\nOriginal Design\nProposed Design\n\n\n\n\nClarity\n\nIn this case, the scatter plots is not suitable to show the relationship between socioeconomic status and performances across different subjects. The overall plots make viewers confuse what is the purpose.\nThere is a lot of overlapping which lead to confusion\n\nTo enhance the visualization in terms of clarity, I would recommend the following:\n\nReplace scatter plots with boxplots for clearer insights\nSeparate the graphs by each subject to avoid confusion\nInclude sepecific title for each graph for clearer differentiation\nInclude the mean into boxplots so it is easier to see the trend\n\n\n\nAesthetics\n\nDifferent colors are used to differentiate between subjects.\n\nFor better aesthetics in the graphs, the following improvements are recommended:\n\nUse different colors for boxplots to identify each subject\nUse red color for the mean to make it clear\nAlign the scale of x-axis and y-axis for all graphs\n\n\n\n\n\n\nSketch\nA sketch for proposed design is shown as below.\n\n\n\nRemake\n\n\nCode\n#Math scores\np1 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvMATH, x=factor(Parent_Edu_level),fill=factor(Parent_Edu_level))) +\n  geom_boxplot(fill=\"#FBD1D5\")+\n  coord_cartesian(ylim = c(0,900))+\n  theme(legend.position = \"none\")+\n  labs(y = \"Average Math Scores\", x= \"Socioeconomic Status\", fill=\"Socioeconomic Status\")+\n  ggtitle(\"I: Math\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title = element_text(size = 24),\n          axis.text= element_text(size = 24))\n#Reading scores\np2 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvREAD, x=factor(Parent_Edu_level),fill=factor(Parent_Edu_level))) +\n  geom_boxplot(fill=\"#E0E994\")+\n  coord_cartesian(ylim = c(0,900))+\n  theme(legend.position = \"none\")+\n  labs(y = \"Average Reading Scores\", x= \"Socioeconomic Status\", fill=\"Socioeconomic Status\")+\n  ggtitle(\"II: Reading\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title = element_text(size = 24),\n          axis.text= element_text(size = 24))\n\n#Science scores\np3 &lt;- ggplot(data=Related_math_read_scie_data, \n       aes(y = avg_pvSCIE, x=factor(Parent_Edu_level),fill=factor(Parent_Edu_level))) +\n  geom_boxplot(fill=\"#F8DC88\")+\n  coord_cartesian(ylim = c(0,900))+\n  theme(legend.position = \"none\")+\n  labs(y = \"Average Science Scores\", x= \"Socioeconomic Status\", fill=\"Socioeconomic Status\")+\n  ggtitle(\"III: Science\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)+\n    theme(plot.title = element_text(size = 26),\n          axis.title = element_text(size = 24),\n          axis.text= element_text(size = 24))\n\npatchwork4 &lt;- (p1/p2/p3) &\n  plot_annotation(title = \"The Relationship between Socioeconomic Status and Performances\",\n  theme = theme(plot.title = element_text(size = 30, \n                                          face = \"bold\",\n                                          hjust= 0.5, \n                                          margin = margin(t = 20, b = 20))))\n\npatchwork4\n\n\n\n\n\n\n\n\n\n\n\nThe redesigned plots illustrates the relationship between socioeconomic status and performance. Boxplots is used instead of scatter plots for clarity. Also, the plots are separated based on subject and include the title. Moreover, the mean is included to clearly show the trend. Different colors is used for boxplots, and the mean is represented in red for visibility. This improvement reduce overlap and enhance differentiation between subjects. As a result, the plots reveal more clearer insights about the relationship. It indicates that students from higher socioeconomic status tend to perform better than those from the lower status."
  },
  {
    "objectID": "project/EDA_brooke.html",
    "href": "project/EDA_brooke.html",
    "title": "Project EDA",
    "section": "",
    "text": "Installing R packages\n\npacman::p_load(tidyverse, haven, ggrepel, patchwork,ggplot2, \n               ggthemes, hrbrthemes,dplyr,tidyr,knitr,ggridges,lubridate)\n\n\n\nImporting data\n\nPollution &lt;- read_csv(\"data/pollutants_singapore.csv\") %&gt;%\n  select(Area,date,pm25,psi)\n\nRows: 18390 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Area, date\ndbl (7): pm25, pm10, o3, no2, so2, co, psi\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nweather &lt;- read_csv(\"data/weather_singapore_2014_to_2017.csv\", locale = locale(encoding = \"ISO-8859-1\"))\n\nRows: 7305 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): Area, Station, Daily Rainfall Total (mm), Highest 30 Min Rainfall ...\ndbl  (3): Year, Month, Day\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nweather &lt;- weather %&gt;%\n  mutate(date = make_date(Year, Month, Day))\n\n\n\nData structure\n\nglimpse(Pollution)\n\nRows: 18,390\nColumns: 4\n$ Area &lt;chr&gt; \"Central\", \"Central\", \"Central\", \"Central\", \"Central\", \"Central\",…\n$ date &lt;chr&gt; \"2024/2/1\", \"2024/2/2\", \"2024/2/3\", \"2024/1/1\", \"2024/1/2\", \"2024…\n$ pm25 &lt;dbl&gt; 46, 48, 46, 35, 25, 37, 26, 26, 31, 24, 34, 26, 25, 46, 24, 50, 4…\n$ psi  &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\n\n\nchecking duplicates\n\nPollution[duplicated(Pollution),]\n\n# A tibble: 0 × 4\n# ℹ 4 variables: Area &lt;chr&gt;, date &lt;chr&gt;, pm25 &lt;dbl&gt;, psi &lt;dbl&gt;\n\n\n\n\nMissing values\n\nna_count &lt;- sapply(Pollution, function(y) sum(length(which(is.na(y)))))\n\nna_count\n\n Area  date  pm25   psi \n    0     0   157 13360 \n\n\n\nna_count_w &lt;- sapply(weather, function(y) sum(length(which(is.na(y)))))\n\nzero_count_w &lt;- sapply(weather, function(y) sum(y == 0, na.rm = TRUE))\nzero_count_w\n\n                         Area                       Station \n                            0                             0 \n                         Year                         Month \n                            0                             0 \n                          Day     Daily Rainfall Total (mm) \n                            0                           281 \n Highest 30 Min Rainfall (mm)  Highest 60 Min Rainfall (mm) \n                          312                           312 \nHighest 120 Min Rainfall (mm)         Mean Temperature (°C) \n                          312                             0 \n     Maximum Temperature (°C)      Minimum Temperature (°C) \n                            0                             0 \n       Mean Wind Speed (km/h)         Max Wind Speed (km/h) \n                            0                             0 \n                         date \n                            0 \n\n\n\n\ndrop missing values\n\nPollution_v2 &lt;- Pollution %&gt;%\n  drop_na()\n\nsum(is.na(Pollution_v2))\n\n[1] 0\n\n\n\n\nConverting data type\n\npollutants &lt;- Pollution %&gt;%\n  mutate(date = trimws(date), # Remove any leading/trailing whitespace\n         date = as.Date(date, format=\"%Y/%m/%d\")) # Convert to Date\n\n\n\nsummary\n\nsummary(pollutants)\n\n     Area                date                 pm25             psi        \n Length:18390       Min.   :2013-12-31   Min.   : 13.00   Min.   : 13.00  \n Class :character   1st Qu.:2016-07-10   1st Qu.: 38.00   1st Qu.: 43.00  \n Mode  :character   Median :2019-01-19   Median : 48.00   Median : 51.00  \n                    Mean   :2019-01-18   Mean   : 50.79   Mean   : 53.74  \n                    3rd Qu.:2021-07-29   3rd Qu.: 59.00   3rd Qu.: 59.00  \n                    Max.   :2024-02-03   Max.   :267.00   Max.   :240.00  \n                                         NA's   :157      NA's   :13360   \n\n\n\n\n\n\n#  filter the data for the area \"Central\"\ncentral_pollution &lt;- pollutants %&gt;%\n  filter(Area == \"Central\")\n\nwest_pollution &lt;- pollutants %&gt;%\n  filter(Area == \"West\")\n\nnorth_pollution &lt;- pollutants %&gt;%\n  filter(Area == \"North\")\n\nsouth_pollution &lt;- pollutants %&gt;%\n  filter(Area == \"South\")\n\neast_pollution &lt;- pollutants %&gt;%\n  filter(Area == \"East\")\n\n\nPM 2.5 concentration across areasMerge graphPM 2.5 by yearPM 2.5 concentration for each area\n\n\n\nggplot(data = pollutants, aes(x = date, y = pm25, color = Area)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Time Series of PM2.5 Across Different Areas\",\n       x = \"Date\",\n       y = \"PM2.5 Concentration\",\n       color = \"Area\")\n\nWarning: Removed 5 rows containing missing values (`geom_line()`).\n\n\n\n\n\n\n\n\n# Merge the datasets by 'Area' and the new 'date' column\ncombined_data &lt;- merge(pollutants, weather, by = c(\"date\", \"Area\"))\n\n\n# Create the plot\np &lt;- ggplot(data = combined_data, aes(x = date, y = pm25, color = Area)) +\n  geom_line() +\n  facet_wrap(~ Area, scales = 'free_y') +\n  theme_minimal() +\n  labs(title = \"Time Series of PM2.5 and Rainfall Across Different Areas\",\n       x = \"Date\",\n       y = \"Concentration / Rainfall\")\n\n\n\n\n# Convert the date to a Date object and extract the year\npollutants_yr &lt;- pollutants %&gt;%\n  mutate(date = as.Date(date),\n         year = factor(year(date)))\n\n# Calculate the average PM2.5 for each area for each year\nannual_avg_pm25 &lt;- pollutants_yr %&gt;%\n  group_by(Area, year) %&gt;%\n  summarise(annual_avg_pm25 = mean(pm25, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Area'. You can override using the\n`.groups` argument.\n\nprint(annual_avg_pm25)\n\n# A tibble: 60 × 3\n# Groups:   Area [5]\n   Area    year  annual_avg_pm25\n   &lt;chr&gt;   &lt;fct&gt;           &lt;dbl&gt;\n 1 Central 2013            NaN  \n 2 Central 2014             60.1\n 3 Central 2015             63.8\n 4 Central 2016             51.5\n 5 Central 2017             47.2\n 6 Central 2018             54.1\n 7 Central 2019             56.2\n 8 Central 2020             43.4\n 9 Central 2021             49.3\n10 Central 2022             43.2\n# ℹ 50 more rows\n\n\n\n# Plot the annual average PM2.5 by area\nggplot(data = annual_avg_pm25, aes(x = year, y = annual_avg_pm25, color = Area)) +\n  geom_line() +\n  scale_x_discrete() +  # This forces the x-axis to be discrete\n  theme_minimal() +\n  labs(title = \"Annual Average PM2.5 Concentration Across Different Areas\",\n       x = \"Year\",\n       y = \"Annual Average PM2.5 Concentration\",\n       color = \"Area\")\n\nWarning: Removed 5 rows containing missing values (`geom_line()`).\n\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\nggplot(data = pollutants, aes(x = date, y = pm25, color = Area)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ Area, scales = 'free_y') +  # Add faceting by area\n  labs(title = \"Time Series of PM2.5 Across Different Areas\",\n       x = \"Date\",\n       y = \"PM2.5 Concentration\")\n\nWarning: Removed 5 rows containing missing values (`geom_line()`).\n\n\n\n\n\n\nggplot(data = Pollution, aes(x = Area, y = pm25)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of PM2.5 Concentrations by Area\",\n       x = \"Area\",\n       y = \"PM2.5 Concentration\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=2)\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\nWarning: Removed 157 rows containing non-finite values (`stat_boxplot()`).\n\n\nWarning: Removed 157 rows containing non-finite values (`stat_summary()`).\n\n\n\n\n  scale_y_continuous(limits = c(0, 300))\n\n&lt;ScaleContinuousPosition&gt;\n Range:  \n Limits:    0 --  300"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "Getting Started\n\nLoading R packageImporting PISA dataFiltering Singapore data\n\n\nIn this in-class exercise, two R packages will be used. They are:\n\ntidyverse, and\nhaven\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)\n\n\n\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\nThe code chunk below uses [filter()] to filter country code of Singapore only\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\nggparcoord() of GGally package to plot statistic parallel coordinates plot,\nparcoords package to plot interactive parallel coordinates plots, and\nparallelPlot package to plot interactive parallel coordinates plots.\n\n\nLoading R packageImporting Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\nThe code chunk below imports WHData-2018.csv into R environment by using read_csv() function of readr package.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#a-simple-parallel-coordinates",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.1 A simple parallel coordinates",
    "text": "2.1 A simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.2 A parallel coordinates with boxplot",
    "text": "2.2 A parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, ggparcoord() will be used to makeover the plot.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line color to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.3 Parallel coordinates with facet",
    "text": "2.3 Parallel coordinates with facet\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#rotating-x-axis-text-label",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.4 Rotating x-axis text label",
    "text": "2.4 Rotating x-axis text label\nWe can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.5 Adjusting the rotated x-axis text label",
    "text": "2.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#the-basic-plot",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.1 The basic plot",
    "text": "3.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#rotate-axis-label",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.2 Rotate axis label",
    "text": "3.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#changing-the-color-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#changing-the-color-scheme",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.3 Changing the color scheme",
    "text": "3.3 Changing the color scheme\nWe can change the default blue color scheme by using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.4 Parallel coordinates plot with histogram",
    "text": "3.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "",
    "text": "In this exercise, we will use corrplot, ggpubr, plotly and tidyverse in RStudio.\n\nLoading R packageImporting Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nThe code chunk below imports the data into R environment by using read_csv() function of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "2.1 Building a basic correlation matrix",
    "text": "2.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "2.2 Drawing the lower corner",
    "text": "2.2 Drawing the lower corner\nThe upper.panel argument will be used to show the lower half of the correlation matrix.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\nThe lower.panel argument will be used to show the upper half of the correlation matrix.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#including-with-correlation-coefficients",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "2.3 Including with correlation coefficients",
    "text": "2.3 Including with correlation coefficients\npanel.cor function will be used to show the correlation coefficient of each pair of variables instead of a scatter plot.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#the-basic-plot",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "3.1 The basic plot",
    "text": "3.1 The basic plot\nOne of the advantage of using ggcorrmat() over many other methods to visualize a correlation matrix is it is ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\nggstatsplot::ggcorrmat(data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10,\n                         lab_size = 2.5),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\n\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.1 Getting started with corrplot",
    "text": "5.1 Getting started with corrplot\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext,corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.2 Working with visual geometrics",
    "text": "5.2 Working with visual geometrics\nThere are seven visual geometrics geometrics to encode the attribute values which are circle, square, ellipse, number, shade, color and pie. The default is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"square\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-layout",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.3 Working with layout",
    "text": "5.3 Working with layout\nThere are three layout types which EW “full”, “upper” and “lower”. The default is “full”. However, this default setting can be changed by using the type argument. Furthermore, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label color to black color respectively as shown in below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"upper\",\n         diag = FALSE,\n         tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.4 Working with mixed layout",
    "text": "5.4 Working with mixed layout\nThecorrplot.mixed(), a wrapped function for mixed visualization style, uses to create a corrgram with mixed layout.\n\ncorrplot.mixed(wine.cor, \n               lower = \"square\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\",\n               number.cex = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.5 Combining corrgram with the significant test",
    "text": "5.5 Combining corrgram with the significant test\nIn this section, we will show a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example, the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\nThe cor.mtest() is used to compute the p-values and confidence interval for each pair of variables. Then,the p.mat argument of corrplot function is used as in the code chunk below.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05,\n         number.cex = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#reorder-a-corrgram",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.6 Reorder a corrgram",
    "text": "5.6 Reorder a corrgram\nCurrently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order= \"FPC\",\n               tl.col = \"black\",\n               number.cex = 0.7)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5b: Visual Correlation Analysis",
    "section": "5.7 Reordering a correlation matrix using hclust",
    "text": "5.7 Reordering a correlation matrix using hclust\ncorrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering by using hclust\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\nreadr for importing csv into R.\nFunnelPlotR for creating funnel plot.\nggplot2 for creating funnel plot manually.\nknitr for building static html table.\nplotly for creating interactive funnel plot.\n\n\nLoading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr) \n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\nsummary(covid19)\n\n Sub-district ID                     City              District  \n Min.   :3.101e+09   JAKARTA BARAT     :56   TAMBORA       : 11  \n 1st Qu.:3.172e+09   JAKARTA PUSAT     :44   KEBAYORAN BARU: 10  \n Median :3.173e+09   JAKARTA SELATAN   :65   CIPAYUNG      :  8  \n Mean   :3.172e+09   JAKARTA TIMUR     :65   JATINEGARA    :  8  \n 3rd Qu.:3.174e+09   JAKARTA UTARA     :31   KEMAYORAN     :  8  \n Max.   :3.175e+09   KAB.ADM.KEP.SERIBU: 6   SETIA BUDI    :  8  \n                                             (Other)       :214  \n       Sub-district    Positive      Recovered        Death       \n ANCOL       :  1   Min.   :  72   Min.   :  69   Min.   :  0.00  \n ANGKE       :  1   1st Qu.:1644   1st Qu.:1578   1st Qu.: 24.50  \n BALE KAMBANG:  1   Median :2420   Median :2329   Median : 39.00  \n BALI MESTER :  1   Mean   :2572   Mean   :2477   Mean   : 40.99  \n BAMBU APUS  :  1   3rd Qu.:3372   3rd Qu.:3242   3rd Qu.: 55.00  \n BANGKA      :  1   Max.   :6231   Max.   :5970   Max.   :158.00  \n (Other)     :261"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "2.1 FunnelPlotR methods: The basic plot",
    "text": "2.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`)\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#makeover-1",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "2.2 Makeover 1",
    "text": "2.2 Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e. proportions)\nxrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#makeover-2",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "2.3 Makeover 2",
    "text": "2.3 Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "3.1 Computing the basic derived fields",
    "text": "3.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "3.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "3.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\n\ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "3.3 Plotting a static funnel plot",
    "text": "3.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4d:Funnel Plots for Fair Comparisons",
    "section": "3.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "3.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "In this section, we will use the following our R packages.\n\ntidyverse, a family of R packages for data science process,\nggstatsplot, a ggplot2 extension created graphics with details from statistical tests included in the information-rich plots themselves.\n\nTo provide alternative statistical inference methods by default.\nTo follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.1 One-sample test: gghistostats() method",
    "text": "2.1 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.2 Unpacking the Bayes Factor",
    "text": "2.2 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat is because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.3 How to interpret Bayes Factor",
    "text": "2.3 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.4 Two-sample mean test: ggbetweenstats()",
    "text": "2.4 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.5 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "2.5 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE)\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.6 Significant Test of Correlation: ggscatterstats()",
    "text": "2.6 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "2.7 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "2.7 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100)))\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.1 Multiple Regression Model using lm()",
    "text": "4.1 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.2 Model Diagnostic: checking for multicolinearity",
    "text": "4.2 Model Diagnostic: checking for multicolinearity\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.3 Model Diagnostic: checking normality assumption",
    "text": "4.3 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package is used.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\ncheck_n &lt;- check_normality(model1)\n\nplot(check_n, type =\"qq\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.4 Model Diagnostic: Check model for homogeneity of variances",
    "text": "4.4 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package is used.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.5 Model Diagnostic: Complete check",
    "text": "4.5 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.6 Visualising Regression Parameters: see methods",
    "text": "4.6 Visualising Regression Parameters: see methods\nIn the code chunk, plot() of see package and parameters() of parameters package is used to visualize the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualizing-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualizing-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4b: Visual Statistical Analysis",
    "section": "4.7 Visualizing Regression Parameters: ggcoefstats() methods",
    "text": "4.7 Visualizing Regression Parameters: ggcoefstats() methods\nIn the code chunk, ggcoefstats() of ggstatsplot package is used to visualize the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html",
    "title": "Hands-on Exercise 3b:Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\nggiraph: for making ‘ggplot’ graphics interactive.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\ngapminder An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\nLoading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nThe code chunk below imports Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nImportant\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to get the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\nsummary(globalPop)\n\n        Country          Year          Young             Old       \n Afghanistan:  28   Min.   :1996   Min.   : 15.50   Min.   : 1.00  \n Albania    :  28   1st Qu.:2010   1st Qu.: 25.70   1st Qu.: 6.90  \n Algeria    :  28   Median :2024   Median : 34.30   Median :12.80  \n Andorra    :  28   Mean   :2023   Mean   : 41.66   Mean   :17.93  \n Angola     :  28   3rd Qu.:2038   3rd Qu.: 53.60   3rd Qu.:25.90  \n Anguilla   :  28   Max.   :2050   Max.   :109.20   Max.   :77.10  \n (Other)    :6036                                                  \n   Population                Continent   \n Min.   :      3.3   Africa       :1568  \n 1st Qu.:    605.9   Asia         :1454  \n Median :   5771.6   Europe       :1344  \n Mean   :  34860.9   North America: 976  \n 3rd Qu.:  22711.0   Oceania      : 526  \n Max.   :1807878.6   South America: 336"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3b:Programming Animated Statistical Graphics with R",
    "section": "2.1 Building a static population bubble plot",
    "text": "2.1 Building a static population bubble plot\nThe basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3b:Programming Animated Statistical Graphics with R",
    "section": "2.2 Building the animated bubble plot",
    "text": "2.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3b:Programming Animated Statistical Graphics with R",
    "section": "3.1 Building an animated bubble plot: ggplotly() method",
    "text": "3.1 Building an animated bubble plot: ggplotly() method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nImportant\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3b:Programming Animated Statistical Graphics with R",
    "section": "3.2 Building an animated bubble plot: plot_ly() method",
    "text": "3.2 Building an animated bubble plot: plot_ly() method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Loading R packageImporting DataSummarizing Data\n\n\nIn this exercise, we will use another our R packages aside from tidyverse.\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\n\nCode\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\n\nCode\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3.1 ggtheme package",
    "text": "3.1 ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\ntheme_economist()theme_solarized()\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 colour=\"grey25\", \n                 fill=\"beige\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 colour=\"grey25\", \n                 fill=\"lightblue\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_solarized()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#hrbthems-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "3.2 hrbthems package",
    "text": "3.2 hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, such as where various labels are placed and the fonts that are used.\n\nOriginalWith arguments\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 colour=\"white\", \n                 fill=\"#F3A7C1\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 colour=\"white\", \n                 fill=\"#F3A7C1\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n::: {.callout-Explanation of arguments}\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.1 Combining two ggplot2 graphs",
    "text": "4.1 Combining two ggplot2 graphs\nThe figures below shows a composite of two histograms created using patchwork\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 colour=\"white\", \n                 fill=\"#F3A7C1\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme(plot.title=element_text(size =9),\n        axis.title.y=element_text(size = 8,\n                                  vjust=0.9),\n        axis.title.x=element_text(size = 8))\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"white\", \n                 fill=\"lightblue\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")+\n  theme(plot.title=element_text(size =9),\n        axis.title.y=element_text(size = 8,\n                                  vjust=0.9),\n        axis.title.x=element_text(size = 8))\n\np1+p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.2 Combining three ggplot2 graphs",
    "text": "4.2 Combining three ggplot2 graphs\nWe can use appropriate operators to plot more complex composite.\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n\nCode\np3 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5,\n              colour = \"#AB1858\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme(plot.background=element_rect(fill=\"#DADADA\",colour=NA),\n        panel.background = element_rect(fill = \"#DADADA\", colour = NA),\n        plot.title=element_text(size =9,hjust=0),\n        axis.title.y=element_text(size = 8),\n        axis.title.x=element_text(size = 8))\n(p1 / p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.3 Creating a composite figure with tag",
    "text": "4.3 Creating a composite figure with tag\npatchwork also provides auto-tagging capabilities as shown in the figure below.\n\n\nCode\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.4 Creating figure with insert",
    "text": "4.4 Creating figure with insert\nWe can place one or several plots or graphic elements freely on top or below another plot by using inset_element() of patchwork\n\n\nCode\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "4.5 Creating a composite figure by using patchwork and ggtheme",
    "text": "4.5 Creating a composite figure by using patchwork and ggtheme\nThe figure below is created by using patchwork and theme_economist() of ggthemes package.\n\n\nCode\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() +\n  theme(plot.title=element_text(size =8.5),\n        axis.title.y=element_text(size = 8,\n                                  vjust=0.9),\n        axis.title.x=element_text(size = 8))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "Loading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\n\nCode\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\n\nCode\nsummary(exam_data)\n\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom_bar",
    "text": "geom_bar\nThe code chunk below plots a bar chart by using geom_bar(.).\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar(fill=\"#FF9999\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom_dotplot",
    "text": "geom_dotplot\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5,\n               fill=\"#FF9999\")+\n  scale_y_continuous(NULL,           \n                     breaks = NULL) \n\n\n\n\n\nFor above geom_dotplot(), we use two arguments.\n\nbinwidth argument is used to change the binwidth to 2.5., and\nscale_y_continuous() is used to turn off the y-axis by setting to NULL."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom_histogram",
    "text": "geom_histogram\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color=\"black\",      \n                 fill=\"#FF9999\")  \n\n\n\n\n\nFor above geom_histogram(),we use three arguments.\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light pink color, and\ncolor argument is used to change the outline colour of the bars in black."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Modifying a geometric object by changing aes()",
    "text": "Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")+\n  scale_fill_manual(values = c(\"#FFCC99\",\"#FF9999\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom-density",
    "text": "geom-density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram. It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density(linewidth = 1)+\n  scale_colour_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom-boxplot",
    "text": "geom-boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,\n           x= GENDER,fill = GENDER)) +\n  geom_boxplot(notch=TRUE)+scale_fill_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom_violin",
    "text": "geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER,fill = GENDER)) +\n  geom_violin()+scale_fill_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom_point()",
    "text": "geom_point()\ngeom_point() is especially useful for creating scatterplot. The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH,colour= GENDER)) +\n  geom_point()+scale_colour_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom objects can be combined",
    "text": "geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER,fill= GENDER)) +\n  geom_boxplot() + scale_fill_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))+     geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "the stat_summary() method",
    "text": "the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER,fill= GENDER)) +\n  geom_boxplot() + scale_fill_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "the geom() method",
    "text": "the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER,fill= GENDER)) +\n  geom_boxplot() + scale_fill_manual(values = c(\"Female\"=\"#FFCC99\",\"Male\"=\"#FF9999\"))+\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#scatter-plot---geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#scatter-plot---geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Scatter Plot - geom_point()",
    "text": "Scatter Plot - geom_point()\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\n\nCode\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point( colour =\"red\") \n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point( colour =\"red\") +\n  geom_smooth(size=0.5)\n\n\n\n\n\nThe default smoothing method can be overridden as shown below.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point(colour =\"red\") +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_wrap-function",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_wrap-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "facet_wrap() function",
    "text": "facet_wrap() function\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "facet_grid() function",
    "text": "facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with Coordinate",
    "text": "Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Changing the y- and x-axis range",
    "text": "Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\nLoading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "2.1 Tooltip effect with tooltip aesthetic",
    "text": "2.1 Tooltip effect with tooltip aesthetic\nThe below code chunk uses ggiraph to plot an interactive statistical graph. It consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\",\n    fill = \"#AB1858\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.1 Displaying multiple information on tooltip",
    "text": "3.1 Displaying multiple information on tooltip\nThe student’s ID will be displayed when you hover the mouse pointer on data point of interest. The content of the tooltip can be customized by including a list object as shown in the code chunk below.\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\",\n    fill = \"#AB1858\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFirst 3 lines of codes create a new field called tootip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#customizing-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#customizing-tooltip-style",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.2 Customizing Tooltip style",
    "text": "3.2 Customizing Tooltip style\nThe below chunk code uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\n\nCode\ntooltip_css &lt;- \"background-color:pink; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.3 Displaying statistics on tooltip",
    "text": "3.3 Displaying statistics on tooltip\nThe below chunk code shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"pink\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.4 Hover effect with data_id aesthetic",
    "text": "3.4 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS,\n        tooltip = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#styling-hover-effect",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.5 Styling hover effect",
    "text": "3.5 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: pink;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\nNote: Different from previous example, in this example the ccs customization request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.6 Combining tooltip and hover effect",
    "text": "3.6 Combining tooltip and hover effect\nWe can combine tooltip and hover effect on the interactive statistical graph using the below code chunk.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #pink;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.7 Click effect with onclick",
    "text": "3.7 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\nNote\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "3.8 Coordinated Multiple Views with ggiraph",
    "text": "3.8 Coordinated Multiple Views with ggiraph\nWe can implement coordinated multiple views methods in the data visualization below.\n\n\n\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualization will be highlighted too.\nIn order to do so, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #pink;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\nNote\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "4.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "4.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "4.2 Working with visual variable: plot_ly() method",
    "text": "4.2 Working with visual variable: plot_ly() method\nThe color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "4.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "4.3 Creating an interactive scatter plot: ggplotly() method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nThere is only extra line that you need to include in the code chunk which is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "4.4 Coordinated Multiple Views with plotly",
    "text": "4.4 Coordinated Multiple Views with plotly\nThere are three steps involved.\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nsubplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "5.1 Interactive Data Table: DT package",
    "text": "5.1 Interactive Data Table: DT package\nA wrapper of the JavaScript Library DataTables. Data objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’.\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3a : Programming Interactive Data Visualisation with R",
    "section": "5.2 Linked brushing: crosstalk method",
    "text": "5.2 Linked brushing: crosstalk method\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualizing distribution and uncertainty.\n\n\nLoading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse) \n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "2.1 Plotting ridgeline graph: ggridges method",
    "text": "2.1 Plotting ridgeline graph: ggridges method\nIn this section, we will plot ridgeline plot by using ggridges package.\nThere two main geom to plot ridgeline plots:\n\ngeom_ridgeline(), and\ngeom_density_ridges().\n\nThe below plot is using geom_density_ridges()\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"pink\", .5),\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "2.2 Varying fill colors along the x axis",
    "text": "2.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline filled with colors that vary in some form along the x axis. This can be done using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"F\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#mapping-the-probabilities-directly-onto-color",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#mapping-the-probabilities-directly-onto-color",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "2.3 Mapping the probabilities directly onto color",
    "text": "2.3 Mapping the probabilities directly onto color\ngridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nThe below figure is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = 1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "2.4 Ridgeline plots with quantile lines",
    "text": "2.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can color the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"red\", \"#A0A0A0A0\", \"purple\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.1 Plotting a Half Eye graph",
    "text": "3.1 Plotting a Half Eye graph\nWe will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_color = NA,\n               fill = \"lightblue\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_color = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.2 Adding the boxplot with geom_boxplot()",
    "text": "3.2 Adding the boxplot with geom_boxplot()\nTo add the second geometry layer, we will use geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"lightblue\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.3 Adding the Dot Plots with stat_dots()",
    "text": "3.3 Adding the Dot Plots with stat_dots()\nTo add the third geometry layer, we will use stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"lightblue\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#finishing-touch",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "3.4 Finishing touch",
    "text": "3.4 Finishing touch\ncoord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist_white() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               fill = \"lightblue\") +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  coord_flip() +\n  theme_economist_white()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\nLoading R packageImporting DataSummarizing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\nexam &lt;- read.csv(\"data/Exam_data.csv\")\n\n\n\nThe code chunk below uses summary()to summarize the data.\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "2.1 Plotting standard error bars of point estimates",
    "text": "2.1 Plotting standard error bars of point estimates\nThe below plot shows the standard error bars of mean maths score by race.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "2.2 Plotting confidence interval of point estimates",
    "text": "2.2 Plotting confidence interval of point estimates\nThe below plot shows the confidence intervals of mean maths score by race.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "2.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "2.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, we will show how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nPlotCode chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4c: Visualizing Uncertainty",
    "section": "3.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "3.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n                     .point = median,\n                     .interval = qi) +\n  labs(title = \"Visualizing confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualizing confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "In this exercise, we will use the following our R packages.\n\nggtern: a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\nPlotly R, R library for plotting interactive statistical graphs via plotly’s JavaScript graphing library, plotly.js. The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task.\n\n\nLoading R packageImporting DataPreparing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(plotly, ggtern, tidyverse)\n\n\n\nThe code chunk below imports respopagsex2000to2018_tidy.csv into R environment by using read_csv() function of readr package.\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-an-interative-ternary-diagram",
    "title": "Hands-on Exercise 5a: Creating Ternary Plot with R",
    "section": "2.2 Plotting an interative ternary diagram",
    "text": "2.2 Plotting an interative ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"black\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"red\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "In this exercise, we will use seriation, heatmaply, dendextend and tidyverse in RStudio.\n\nLoading R packageImporting DataPreparing DataTransforming Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nThe code chunk below imports the data into R environment by using read_csv() function of readr package.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\nWe need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\n\n\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.1 heatmap() of R Stats",
    "text": "2.1 heatmap() of R Stats\nWe will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\n\n\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\n\n\n\nThe code chunk below normalizes the matrix column-wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.1 Working with heatmaply",
    "text": "3.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          cexRow = 0.4,\n          cexCol = 0.8,\n          margins = c(10, 10))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#data-trasformation",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#data-trasformation",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.2 Data trasformation",
    "text": "3.2 Data trasformation\nThere are three main data transformation methods supported by heatmaply() which are scale, normalize and percentilse.\n\n3.2.1 Scaling method\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n3.2.2 Normalizing method\nDifferent from Scaling, the normalize method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n3.2.3 Percentizing method\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#clustering-algorithm",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.3 Clustering algorithm",
    "text": "3.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#manual-approach",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.4 Manual approach",
    "text": "3.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#statistical-approach",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.5 Statistical approach",
    "text": "3.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#seriation",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.6 Seriation",
    "text": "3.6 Seriation\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.7 Working with colour palettes",
    "text": "3.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Reds color palette of rColorBrewer is used.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Reds)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#the-finishing-touch",
    "title": "Hands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.8 The finishing touch",
    "text": "3.8 The finishing touch\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Reds,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "In this exercise, we will use treemap and tidyverse in RStudio.\n\nLoading R packageImporting DataPreparing Data\n\n\nThe code chunk below uses p_load() of pacman package to check if these packages are installed in the computer and load them onto your working R environment.\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\nThe code chunk below imports the data into R environment by using read_csv() function of readr package.\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\nWe need to manipulate and prepare a data.frame that is appropriate for treemap visualization:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\n\n\nThe code chunk below shows a typical two lines code approach to perform the steps\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\n\n\nNote\n\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation\n\n\n\n\n\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%:\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-a-static-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-a-static-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.1 Designing a static treemap",
    "text": "2.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#using-the-basic-arguments",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.2 Using the basic arguments",
    "text": "2.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")\n\n\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used\n\n\n\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.3 Working with vColor and type arguments",
    "text": "2.3 Working with vColor and type arguments\nIn the code chunk below, type argument is define as value.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThinking to learn from the code chunk above\n\n\n\n\nThe rectangles are colored with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#the-value-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#the-value-type-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.4 The “value” type treemap",
    "text": "2.4 The “value” type treemap\nThe code chunk below shows a value type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#the-manual-type-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.5 The “manual” type treemap",
    "text": "2.5 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\nThe color scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging color palette such as RdYlBu if the values are all positive or negative\n\n\n\nTo solve this issue, a single color palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#working-with-algorithm-argument",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#working-with-algorithm-argument",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.6 Working with algorithm argument",
    "text": "2.6 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#using-sortid",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "2.7 Using sortID",
    "text": "2.7 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-a-basic-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.1 Designing a basic treemap",
    "text": "3.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#defining-hierarchy",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "3.2 Defining hierarchy",
    "text": "3.2 Defining hierarchy\nBelow code chunk is to group by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\nBelow code chunk is to group by Planning Area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#installing-d3treer-package",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "4.1 Installing d3treeR package",
    "text": "4.1 Installing d3treeR package\n\ninstall.packages(\"devtools\")\n\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\",force = TRUE)\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\kbuat\\AppData\\Local\\Temp\\RtmpkL9ZlH\\remotes26ec617c1a6c\\d3treeR-d3treeR-ebb833d/DESCRIPTION' ... OK\n* preparing 'd3treeR':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'd3treeR_0.1.tar.gz'\n\n\n\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#designing-an-interactive-treemap",
    "title": "Hands-on Exercise 5e: Treemap Visualisation with R",
    "section": "4.2 Designing An Interactive Treemap",
    "text": "4.2 Designing An Interactive Treemap\nThe codes below perform two processes.\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\")\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to ISSS608 Visual Analytics and Applications website",
    "section": "",
    "text": "Lastest Posts\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5e: Treemap Visualisation with R\n\n\n\n\n\n\n\n\n\nFeb 8, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data\n\n\n\n\n\n\n\n\n\nFeb 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\n\n\n\n\n\n\nFeb 7, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "",
    "text": "Andreas Schleicher, the director of OECD education,shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Additionally, many Singapore’s Minister for Education have adopted the slogan “every school a good school.” However, the perception among the public is that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#installing-r-packages",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#installing-r-packages",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3.1 Installing R packages",
    "text": "3.1 Installing R packages\nThe code chunk below uses p_load() of pacman package to check if multiple packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse, haven, ggrepel, patchwork,ggplot2, \n               ggthemes, hrbrthemes,dplyr,tidyr,knitr,ggridges)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#importing-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3.2 Importing Data",
    "text": "3.2 Importing Data\nThe 2022 Programme for International Student Assessment (PISA) data released on December 5, 2022 will be used. PISA global education survey every three years to assess the education systems worldwide through testing 15 year old students in the subjects of mathematics, reading, and science.\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nFiltering dataSelecting variables\n\n\nFilter Singaporean data by using filter()\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\nThe code chunk below uses select() to include selected variables.\n\nstu_qqq_SG_v2 &lt;- stu_qqq_SG %&gt;%\n  select(CNTSTUID,PV1MATH,PV1READ,PV1SCIE,STRATUM,ST004D01T,ESCS) %&gt;%\n  rename(STUDENT_ID=CNTSTUID,\n         MATH=PV1MATH,\n         READING=PV1READ,\n         SCIENCE=PV1SCIE,\n         SCHOOL=STRATUM,\n         SOCIOECONOMIC_STATUS=ESCS,\n         GENDER=ST004D01T)\n\n\nAccording to OECD, it stated that single plausible value can be used to analzye in the exploratory phase of the data. Using one or five plausible values will not make any significant difference. Therefore, we will proceed with PV1 only for further analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#wrangling-data",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#wrangling-data",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "3.3 Wrangling data",
    "text": "3.3 Wrangling data\n\nData structureDuplicatesMissing valuesRecoding and Binning\n\n\nThe code chunk below uses glimpse to check the data structure\n\nglimpse(stu_qqq_SG_v2)\n\nRows: 6,606\nColumns: 7\n$ STUDENT_ID           &lt;dbl&gt; 70200001, 70200002, 70200003, 70200004, 70200005,…\n$ MATH                 &lt;dbl&gt; 639.004, 697.191, 693.710, 427.317, 436.462, 569.…\n$ READING              &lt;dbl&gt; 676.298, 625.585, 620.116, 381.495, 448.199, 469.…\n$ SCIENCE              &lt;dbl&gt; 710.634, 670.646, 666.095, 340.308, 456.333, 475.…\n$ SCHOOL               &lt;chr&gt; \"SGP01\", \"SGP01\", \"SGP01\", \"SGP01\", \"SGP01\", \"SGP…\n$ GENDER               &lt;dbl&gt; 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1…\n$ SOCIOECONOMIC_STATUS &lt;dbl&gt; 0.1836, 0.8261, -1.0357, -0.9606, 0.0856, 0.1268,…\n\n\n\n\nThe code chunk below uses duplicated() to check duplicates\n\nstu_qqq_SG_v2[duplicated(stu_qqq_SG_v2),]\n\n# A tibble: 0 × 7\n# ℹ 7 variables: STUDENT_ID &lt;dbl&gt;, MATH &lt;dbl&gt;, READING &lt;dbl&gt;, SCIENCE &lt;dbl&gt;,\n#   SCHOOL &lt;chr&gt;, GENDER &lt;dbl&gt;, SOCIOECONOMIC_STATUS &lt;dbl&gt;\n\n\nFrom the result, there is no duplicate.\n\n\nThe code chunk below uses to check missing values\n\nsum(is.na(stu_qqq_SG_v2))\n\n[1] 47\n\n\nThe result shows that there are missing values\nThe code chunk below uses drop_na() to remove missing values\n\nstu_qqq_SG_v3 &lt;- stu_qqq_SG_v2 %&gt;%\n  drop_na()\nsum(is.na(stu_qqq_SG_v3))\n\n[1] 0\n\n\n\n\nThe code below use recode() to recode gender and nitle() to bin socioeconomic status\n\nstu_qqq_SG_final &lt;- stu_qqq_SG_v3 %&gt;%\n  mutate(GENDER = recode(GENDER,\n                         `1` = \"Female\",\n                         `2` = \"Male\"),\n         SCHOOL = recode(SCHOOL,\n                         \"SGP01\" = \"Public School\",\n                         \"SGP03\" = \"Private School\")) %&gt;%\n  mutate(SOCIOECONOMIC_STATUS = ntile(SOCIOECONOMIC_STATUS, 4), .after = SOCIOECONOMIC_STATUS) %&gt;%\n  mutate(SOCIOECONOMIC_STATUS = recode(SOCIOECONOMIC_STATUS,\n                                      `1` = \"Highly Disadvantaged\",\n                                      `2` = \"Disadvantaged\",\n                                      `3` = \"Advantaged\",\n                                      `4` = \"Highly Advantaged\")) %&gt;%\n  mutate(SOCIOECONOMIC_STATUS = factor(SOCIOECONOMIC_STATUS, \n                                      levels = c(\"Highly Disadvantaged\", \"Disadvantaged\", \n                                                 \"Advantaged\", \"Highly Advantaged\"),\n                                      ordered = TRUE))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#distribution-of-students-performance",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#distribution-of-students-performance",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5.1 Distribution of Students’ Performance",
    "text": "5.1 Distribution of Students’ Performance\nThe below panel is shown the distribution of Singapore students’ performance in mathematics, reading, and science.\n\nMATHSREADINGSCIENCE\n\n\n\n\nCode\n#calculate Mean and Median \nmean_math &lt;- mean(stu_qqq_SG_final$MATH,na.rm = TRUE)\nmedian_math &lt;-median(stu_qqq_SG_final$MATH,na.rm = TRUE)\n\nggplot(stu_qqq_SG_final, aes(x = MATH)) +\n  geom_histogram(bins = 30, fill = \"beige\", color = \"grey\") +\n  scale_x_continuous(limits = c(0, 1000)) + \n  labs(title =\"Distribution of Math Scores\", y=\"count\") +\n  geom_vline(xintercept = mean_math,\n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) +\n  annotate(\"text\", x = 480, y = 900,\n           label = paste(\"Mean =\", round(mean_math, 2)), \n           color = \"red\", \n           size = 3.5)+  \n  geom_vline(xintercept = median_math,\n             color = \"blue\", \n             linetype = \"dashed\", \n             size = 1) +\n  annotate(\"text\", x = 700, y = 900,\n           label = paste(\"Median =\", round(median_math, 2)), \n           color = \"blue\", \n           size = 3.5)\n\n\n\n\n\n\n\n\n\nCode\nmean_reading &lt;- mean(stu_qqq_SG_final$READING, na.rm = TRUE)\nmedian_reading &lt;- median(stu_qqq_SG_final$READING, na.rm = TRUE)\n\nggplot(stu_qqq_SG_final, aes(x = READING)) +\n  geom_histogram(bins = 30, fill = \"pink\", color = \"grey\") +\n  scale_x_continuous(limits = c(0, 1000)) + \n  labs(title =\"Distribution of Reading Scores\", y=\"count\") +\n  geom_vline(xintercept = mean_reading,\n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) +\n  annotate(\"text\", x = 400, y = 900,\n           label = paste(\"Mean =\", round(mean_reading, 2)), \n           color = \"red\", \n           size = 3.5)+  \n  geom_vline(xintercept = median_reading,\n             color = \"blue\", \n             linetype = \"dashed\", \n             size = 1) +\n  annotate(\"text\", x = 700, y = 900,\n           label = paste(\"Median =\", round(median_reading, 2)), \n           color = \"blue\", \n           size = 3.5)\n\n\n\n\n\n\n\n\n\nCode\nmean_science &lt;- mean(stu_qqq_SG_final$SCIENCE, na.rm = TRUE)\nmedian_science &lt;- median(stu_qqq_SG_final$SCIENCE, na.rm = TRUE)\n\nggplot(stu_qqq_SG_final, aes(x = SCIENCE)) +\n  geom_histogram(bins = 30, fill = \"lightblue\", color = \"grey\") +\n  scale_x_continuous(limits = c(0, 1000)) +\n  labs(title = \"Distribution of Science Scores\", y = \"Count\") +\n  geom_vline(xintercept = mean_science,\n             color = \"red\", \n             linetype = \"dashed\",\n             size = 1) +\n  annotate(\"text\", x = 480, y = 900,  \n           label = paste(\"Mean =\", round(mean_science, 2)), \n           color = \"red\", \n           size = 3.5) +  \n  geom_vline(xintercept = median_science,\n             color = \"blue\",\n             linetype = \"dashed\", \n             size = 1) +\n  annotate(\"text\", x = 700, y = 900,  \n           label = paste(\"Median =\", round(median_science, 2)), \n           color = \"blue\", \n           size = 3.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe distribution among maths, science, and reading appear to be quite similar.\nHowever, when comparing all three subjects, maths has the highest values for both mean and median, while reading has the lowest mean and median scores."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-gender",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-gender",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5.2 Performance and Gender",
    "text": "5.2 Performance and Gender\nTo find some insights between the performance of each subjects and gender, we will use density graph.\n\n\nCode\np1 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = MATH,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#AB1858\", \"white\")) +\n  scale_color_manual(values = c(\"#AB1858\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))\n\np2 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = READING,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#AB1858\", \"white\")) +\n  scale_color_manual(values = c(\"#AB1858\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))\n\np3 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = SCIENCE,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#AB1858\", \"white\")) +\n  scale_color_manual(values = c(\"#AB1858\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))\n\n(p1/p2/p3)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe distributions of performance in each subject between gender are slightly different.\nThe density plot of females have a higher peak compared to males. This suggests that more females tend to have the similar scores, whereas males’ score appear to be more scattered indicating a wider range of performance among them."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-school-type",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-school-type",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5.3 Performance and School Type",
    "text": "5.3 Performance and School Type\nIn this section, we will use density graph and boxplots to find insights related to performance and type of schools\n\nMATHSREADINGSCIENCE\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = MATH, x=SCHOOL,fill=SCHOOL)) +\n  geom_boxplot()+\n  scale_y_continuous(limits = c(0, 1000))+\n  theme(legend.position = \"none\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(x = MATH,\n           color=SCHOOL,\n           fill=SCHOOL)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#67B5F3\", \"white\")) +\n  scale_color_manual(values = c(\"#67B5F3\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))+\n  theme(legend.position = c(0.85, 0.85))+\n  labs(title = \"Distribution of Math Scores across Different School Types\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = READING, x=SCHOOL,fill=SCHOOL)) +\n  geom_boxplot()+\n  scale_y_continuous(limits = c(0, 1000))+\n  theme(legend.position = \"none\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(x = READING,\n           color=SCHOOL,\n           fill=SCHOOL)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#67B5F3\", \"white\")) +\n  scale_color_manual(values = c(\"#67B5F3\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))+\n  theme(legend.position = c(0.85, 0.85))+\n  labs(title = \"Distribution of Reading Scores across Different School Types\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = SCIENCE, x=SCHOOL,fill=SCHOOL)) +\n  geom_boxplot()+\n  scale_y_continuous(limits = c(0, 1000))+\n  theme(legend.position = \"none\")+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(x = SCIENCE,\n           color=SCHOOL,\n           fill=SCHOOL)) +\n  geom_density(linewidth = 0.05, alpha=0.6)+\n  scale_fill_manual(values = c(\"#67B5F3\", \"white\")) +\n  scale_color_manual(values = c(\"#67B5F3\", \"grey\"))+\n  scale_x_continuous(limits = c(0, 1000))+\n  theme(legend.position = c(0.85, 0.85))+\n  labs(title = \"Distribution of Science Scores across Different School Types\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe boxplots of each subject indicate that the average score between private school and public school do not differ. Private schools have slightly higher scores on average. However, there is a notable insights showing that there are more outliers in public schools.\nWhen we examine the density graph, it becomes evident that a higher degree of overlap between two types of schools. This could indicates the greater score diversity within public schools."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#performance-and-socioeconomic-status",
    "title": "Take-home Exercise 1: Creating data visualisation beyond default",
    "section": "5.4 Performance and Socioeconomic Status",
    "text": "5.4 Performance and Socioeconomic Status\nThe boxplot and ridges graph will be used to identify the relationship between socioeconomic status and the performance on each subject\n\nMATHSREADINGSCIENCE\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = MATH, x=SOCIOECONOMIC_STATUS,fill=SOCIOECONOMIC_STATUS)) +\n  geom_boxplot(fill = \"beige\")+\n  scale_y_continuous(limits = c(0, 1000))+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)+\n  theme(legend.position = \"none\")\n\n\n\n\n\nCode\nggplot(data = stu_qqq_SG_final, \n       aes(x = MATH, y = SOCIOECONOMIC_STATUS, fill = SOCIOECONOMIC_STATUS)) +\n  geom_density_ridges() +\n  scale_x_continuous(limits = c(0, 1000)) +\n  labs(title = \"Distribution of Math Scores by Socioeconomic Status\", \n       y = \"Socioeconomic Status\", x = \"Math Score\") +\n  theme_ridges()+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = READING, x=SOCIOECONOMIC_STATUS,fill=SOCIOECONOMIC_STATUS)) +\n  geom_boxplot(fill=\"pink\")+\n  scale_y_continuous(limits = c(0, 1000))+\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)+\n  theme(legend.position = \"none\")\n\n\n\n\n\nCode\nggplot(data = stu_qqq_SG_final, \n       aes(x = READING, y = SOCIOECONOMIC_STATUS, fill = SOCIOECONOMIC_STATUS)) +\n  geom_density_ridges() +\n  scale_x_continuous(limits = c(0, 1000)) +\n  labs(title = \"Distribution of Reading Scores by Socioeconomic Status\", \n       y = \"Socioeconomic Status\", x = \"Reading Score\") +\n  theme_ridges()+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(data=stu_qqq_SG_final, \n       aes(y = SCIENCE, x=SOCIOECONOMIC_STATUS,fill=SOCIOECONOMIC_STATUS)) +\n  geom_boxplot(fill=\"lightblue\")+\n  scale_y_continuous(limits = c(0, 1000))+\n    stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"black\",        \n               size=2)+\n  theme(legend.position = \"none\")\n\n\n\n\n\nCode\nggplot(data = stu_qqq_SG_final, \n       aes(x = SCIENCE, y = SOCIOECONOMIC_STATUS, fill = SOCIOECONOMIC_STATUS)) +\n  geom_density_ridges() +\n  scale_x_continuous(limits = c(0, 1000)) +\n  labs(title = \"Distribution of Science Scores by Socioeconomic Status\", \n       y = \"Socioeconomic Status\", x = \"Science Score\") +\n  theme_ridges()+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe boxplot for each subjects reveal significant difference in performance based on socioeconomic status. Students with higher socioeconomic status tend to achieve better scores. This demonstrates a positive correlation between socioeconomic status and scores. In other words, students from more advantaged backgrounds tend to perform better.\nThe density ridges plots show that students with more advantaged socioeconomic status cluster around higher score ranges, while those with less advantaged socioeconomic status tend to cluster around lower score ranges. This reaffirms that socioeconomic advantages are associated with better academic outcome."
  }
]
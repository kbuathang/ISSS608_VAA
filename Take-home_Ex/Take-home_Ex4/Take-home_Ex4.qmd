---
title: "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application (WIP)" 
date: March 5,2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
  message: false
code-fold: false
code-summary: "Show the code"
---

# 1 Overview

In this exercise, we are required to select one of the module of your proposed Shiny application and complete the following tasks:

-   To evaluate and determine the necessary R packages needed for your Shiny application are supported in R CRAN,

-   To prepare and test the specific R codes can be run and returned the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications, and

-   To select the appropriate Shiny UI components for exposing the parameters determine above.

# 2 Project Information

In this project, we will analyze weather across different areas in Singapore and build an interactive R Shiny application.

For this exercise, we will focus on **EDA and CDA tab** where users can explore the distribution and trends in the dataset for specific periods or stations, and use statistical analysis to confirm the trends.

# 3 Data Preparation

## 3.1 Installing R packages

The code chunk below uses `p_load()` of **pacman** package to check if multiple packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse, naniar,imputeTS, DT, lubridate,ggplot2,ggstatsplot,plotly,
                   patchwork,ggthemes,dplyr,ggridges,gridExtra)
```

## 3.2 Importing Data

We will use the weather dataset for 63 stations between 2014 to 2023 from [Meteorological Service Singapore (MSS)](http://www.weather.gov.sg/climate-historical-daily/). After the data preparation, we left with 11 stations. The process of data preparation is explained in via this link.

```{r}
weather <- read_rds("data/weather_imputed_11stations.rds") 
```

## 3.3 Summarizing the data

```{r}
glimpse(weather)

```

# 4 Exploratory Data Analysis

In the dataset, there are 4 variables for users to choose to explore.

-   `Daily Rainfall Total (mm)`

-   `Mean Temperature (°C)`

-   `Minimum Temperature (°C)`

-   `Maximum Temperature (°C)`

For this section, we will use violin plots and box plots to visualize the trend of temperature variables over specified periods or at particular stations. However, for rainfall data, dot plots will be used to enhance the better visualization.

Other exploratory plots may include in the future work.

## 4.1 Compare Mean Temperature (°C) for Station(s) Across the specified Year

```{r}
# Users define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)


plot_ly(data = allstations_year,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
layout(title = list(text = paste("Mean Temperature across all Stations in", selected_year)),
       xaxis = list(title = "Station"),
       yaxis = list(title = "Mean Temperature (°C)"))

```

## 4.2 Compare Mean Temperature (°C) for One Station Across Different Years

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

plot_ly(data = onestation_data,
             x = ~Year,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = I('lightblue'),  
        hoveron = "points+kde",
        line = list(width=1)) %>%
layout(title = list(text = "Mean Temperature in Station(s) across the years 2021 to 2023"),
       xaxis = list(title = "Year"),
       yaxis = list(title = "Mean Temperature (°C)"))

```

## 4.3 Compare Mean Temperature (°C) for Multiple Stations Across Different Years

```{r}
selected_twostations <- c("Seletar", "Changi")

twostations_data <- weather %>%    
  filter(Station == selected_twostations)

# filter each year
twostations_data_2021 <- twostations_data %>%
  filter(Year == 2021)
twostations_data_2022 <- twostations_data %>%
  filter(Year == 2022)
twostations_data_2023 <- twostations_data %>%
  filter(Year == 2023)

p1 <- plot_ly(data = twostations_data_2021,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(title = list(text = "2021"),
         xaxis = list(title = "2021"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = TRUE) 

p2 <- plot_ly(data = twostations_data_2022,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(xaxis = list(title = "2022"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = FALSE)

p3 <- plot_ly(data = twostations_data_2023,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(xaxis = list(title = "2023"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = FALSE)

subplot(p1, p2, p3, 
        nrows = 1, 
        shareX = TRUE, 
        shareY = TRUE) %>%
  layout(title = "Mean Temperature in Station(s) across the years 2021 to 2023")

```

## 4.4 Compare Daily Rainfall Total (mm) for Station(s) Across the specified Year

```{r}
# User define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

p1 <- ggplot(allstations_year, 
             aes(x = Station, y = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(color = `Daily Rainfall Total (mm)`,
                 text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:',`Daily Rainfall Total (mm)`)),
             size=2.5) +
  labs(title = paste("Daily Rainfall across all Stations in", selected_year),
       x = "Station",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")


ggplotly(p1, tooltip = "text") %>%
  layout( xaxis = list(tickangle = 45,
      tickfont = list(size = 12)),
      hovermode = 'closest') %>%
  config(displayModeBar = FALSE)

```

## 4.5 Compare Daily Rainfall Total (mm) for One Station Across Different Years

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

p1 <- ggplot(onestation_data,
             aes(x = Year, y = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(color = `Daily Rainfall Total (mm)`,
                 text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:',`Daily Rainfall Total (mm)`)),
             size=2.5) +
  labs(title = "Daily Rainfall in Station(s) across the years 2021 to 2023",
       x = "Year",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")+
  scale_x_continuous(breaks = seq(2021, 2023, by = 1)) 

ggplotly(p1, tooltip = "text") %>%
  layout(hovermode = 'closest') %>%
  config(displayModeBar = FALSE)
```

## 4.6 Compare Daily Rainfall Total (mm) for Multiple Stations Across Different Years

```{r}
#| fig-height: 10
selected_twostations <- c("Seletar", "Changi")

twostations_data <- weather %>%    
  filter(Station == selected_twostations)

p <- ggplot(twostations_data, 
            aes(x = Station, y = `Daily Rainfall Total (mm)`, 
                color = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:', `Daily Rainfall Total (mm)`)), size = 2.5) +
  facet_wrap(~Year, ncol = 1) +
  labs(title = "Daily Rainfall in Station(s) across the years 2021 to 2023",
       x = "Station",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")


ggplotly(p, tooltip = "text") %>%
  layout(hovermode = 'closest') %>%
  config(displayModeBar = FALSE)

```

# 5 Confirmatory Data Analysis

For this section, we will conduct statistical analysis by using **Kruskal-Wallis one-way ANOVA test** to confirm the trends of variables for specified periods or stations. In the dataset, there are 4 variables for users to choose to explore.

-   `Daily Rainfall Total (mm)`

-   `Mean Temperature (°C)`

-   `Minimum Temperature (°C)`

-   `Maximum Temperature (°C)`

## 5.1 Compare Mean Temperature (°C) for Station(s) Across the specified Year

**Hypothesis**

*H0 : Daily mean temperature in 2021 across different stations are equal*

*H1 : Daily mean temperature in 2021 across different station are not equal*

```{r}
#| fig-width: 12
#| fig-height: 5

# User define the parameter
selected_year <- "2021"
selected_StatApproach <- "nonparametric"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

ggbetweenstats(data = allstations_year,
  x = Station,
  y = `Mean Temperature (°C)`,
  type = selected_StatApproach,
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

## 5.2 Compare Mean Temperature (°C) for One Station Across Different Years

**Hypothesis**

*H0 : Daily mean temperature in Ang Mo Kio across different years are equal*

*H1 : Daily mean temperature in Ang Mo Kio across different years are not equal*

```{r}
selected_onestation <- "Ang Mo Kio"
selected_StatApproach <- "nonparametric"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

ggbetweenstats(data = onestation_data,
  x = Year,
  y = `Mean Temperature (°C)`,
  type= selected_StatApproach, # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

## 5.3 Compare Mean Temperature (°C) for Multiple Stations Across Different Years

**Hypothesis**

*H0 : Daily mean temperature in Seletar and Changi across different years are equal*

*H1 : Daily mean temperature in Seletar and Changi across different years are not equal*

```{r}
#| fig-width: 12
#| fig-height: 5

# User define parameters
selected_twostations <- c("Seletar", "Changi")
selected_StatApproach <- "nonparametric"

twostations_data <- weather %>%    
  filter(Station == selected_twostations)

grouped_ggbetweenstats(data = twostations_data,
  x = Station,
  y = `Mean Temperature (°C)`,
  grouping.var = Year,
  type= selected_StatApproach, # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

## 5.4 Compare Daily Rainfall Total (mm) for Station(s) Across the specified Year

**Hypothesis**

*H0 : Daily Rainfall Total in 2021 across different stations are equal*

*H1 : Daily Rainfall Total in 2021 across different station are not equal*

```{r}
#| fig-width: 12
#| fig-height: 5

# User define the parameter
selected_year <- "2021"
selected_StatApproach <- "nonparametric"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

ggbetweenstats(data = allstations_year,
  x = Station,
  y = `Daily Rainfall Total (mm)`,
  type = selected_StatApproach,
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

## 5.5 Compare Daily Rainfall Total (mm) for One Station Across Different Years

**Hypothesis**

*H0 : Daily Rainfall Total in Ang Mo Kio across different years are equal*

*H1 : Daily Rainfall Total in Ang Mo Kio across different years are not equal*

```{r}
selected_onestation <- "Ang Mo Kio"
selected_StatApproach <- "nonparametric"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

ggbetweenstats(data = onestation_data,
  x = Year,
  y = `Daily Rainfall Total (mm)`,
  type= selected_StatApproach, # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

## 5.6 Compare Daily Rainfall Total (mm) for for Multiple Stations Across Different Years

**Hypothesis**

*H0 : Daily Rainfall Total in Seletar and Changi across different years are equal*

*H1 : Daily Rainfall Total in Seletar and Changi across different years are not equal*

```{r}
#| fig-width: 12
#| fig-height: 5

# User define parameters
selected_twostations <- c("Seletar", "Changi")
selected_StatApproach <- "nonparametric"

twostations_data <- weather %>%    
  filter(Station == selected_twostations)

grouped_ggbetweenstats(data = twostations_data,
  x = Station,
  y = `Daily Rainfall Total (mm)`,
  grouping.var = Year,
  type= selected_StatApproach, # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE)

```

# 6 UI Design

The EDA and CDA tab will consist of two sub-tabs:

1.  Exploratory Data Analysis

2.  Confirmatory Data Analysis

## 6.1 Exploratory Data Analysis

The main objective of exploratory data analysis section is to allow users with the tools to delve into and identify trends within different weather variables across selected year and stations. This interactive experience aims to enhance users' understanding of weather variable patterns and to facilitate the discovery of key insights through visualization. However, for rainfall variable, we will implement dot plots for the better visual.

![](images/clipboard-456216068.png)

::: callout-tip
## Interactive features

1.  **Choose variable** : Users can choose a weather variable such as Daily Rainfall Total (mm), Mean Temperature (°C), etc.
2.  **Compare across** : Users are allowed to compare across different stations or between years.
3.  **Select Stations** : Users can select one or multiple stations for comparison.
4.  **Select Year** : Users can choose the year for which the data should be visualized.
5.  **EDA Plot** : When stations are selected under compare across, the plot will display the variation within those stations for the specified year. If years is chosen, the plot will display the trend of selected stations across the years 2021 to 2023.
:::

### 6.1.1 Test case: Compare Mean Temperature (°C) for One Stations Across Different Years

![](images/clipboard-2207405565.png)

### 6.1.2 Test case: Compare Mean Temperature (°C) for Multiple Stations Across Different Years

![](images/clipboard-1300324140.png)

### 6.1.3 Test case: Compare Daily Rainfall Total (mm) for Station(s) Across the specified Year

![](images/clipboard-2405516460.png)

## 6.2 Confirmatory Data Analysis

The main objective of Confirmatory Data Analysis section is to provide users with a reliable method to ensure the patterns observed in weather variables are true. This section builds on the preliminary findings by offering a statistical approach to validate these patterns across selected years or stations.

![](images/clipboard-1882135096.png)

::: callout-tip
## Interactive features

1.  **Choose variable** : Users can choose a weather variable such as Daily Rainfall Total (mm), Mean Temperature (°C), etc.
2.  **Compare across** : Users are allowed to compare across different stations or between years.
3.  **Statistical Approach**: Users can specify the type of statistical approach they want to use.
4.  **Select Stations** : Users can select one or multiple stations for comparison.
5.  **Select Year** : Users can choose the year for which the data should be visualized.
6.  **CDA Plot** : When stations are selected under compare across, the plot will display the variation within those stations for the specified year. If years is chosen, the plot will display the trend of selected stations across the years 2021 to 2023.
:::

### 6.2.1 Test case: Compare Mean Temperature (°C) for One Stations Across Different Years

![](images/clipboard-444474855.png)

### 6.2.2 Test case: Compare Mean Temperature (°C) for Multiple Stations Across Different Years

![](images/clipboard-3065426315.png)

### 6.2.3 Test case: Compare Daily Rainfall Total (mm) for Station(s) Across the specified Year

![](images/clipboard-2860953512.png)

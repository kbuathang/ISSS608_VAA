---
title: "Take-home Exercise 4: Prototyping Modules for Visual Analytics Shiny Application (WIP)" 
date: March 5,2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
  message: false
code-fold: false
code-summary: "Show the code"
---

# 1 Overview

In this exercise, we are required to select one of the module of your proposed Shiny application and complete the following tasks:

-   To evaluate and determine the necessary R packages needed for your Shiny application are supported in R CRAN,

-   To prepare and test the specific R codes can be run and returned the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications, and

-   To select the appropriate Shiny UI components for exposing the parameters determine above.

# 2 Project Information

In this project, we will analyze weather across different areas in Singapore and build an interactive R Shiny application.

For this exercise, we will focus on **EDA and CDA tab** where users can explore the distribution and trends in the dataset for specific periods or locations (station or region), and use statistical analysis to confirm the trends.

# 3 Data Preparation

## 3.1 Installing R packages

The code chunk below uses `p_load()` of **pacman** package to check if multiple packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse, naniar,imputeTS, DT, lubridate,ggplot2,ggstatsplot,plotly,
                   patchwork,ggthemes,dplyr,ggridges,gridExtra)
```

## 3.2 Importing Data

We will use the weather dataset for 63 stations between 2014 to 2023 from [Meteorological Service Singapore (MSS)](http://www.weather.gov.sg/climate-historical-daily/)

```{r}
weather <- read_rds("data/weather_imputed_11stations.rds") 
```

## 3.3 Summarizing the data

```{r}
glimpse(weather)

```

# 4 Exploratory Data Analysis

## 4.1 Mean Temperature (°C)

### 4.1.1 Station(s) Across the specified Year

```{r}
# Users define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)


plot_ly(data = allstations_year,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
layout(title = list(text = paste("Mean Temperature across all Stations in", selected_year)),
       xaxis = list(title = "Station"),
       yaxis = list(title = "Mean Temperature (°C)"))

```

### 4.1.2 One Station Across Different Years

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

plot_ly(data = onestation_data,
             x = ~Year,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = I('lightblue'),  
        hoveron = "points+kde",
        line = list(width=1)) %>%
layout(title = list(text = "Mean Temperature in Station(s) across the years 2021 to 2023"),
       xaxis = list(title = "Year"),
       yaxis = list(title = "Mean Temperature (°C)"))

```

### 4.1.3 Multiple Station Across Different Years

```{r}
selected_twostations <- c("Seletar", "Changi")

selected_twostations <- weather %>%    
  filter(Station == selected_twostations)

# filter each year
twostations_data_2021 <- selected_twostations %>%
  filter(Year == 2021)
twostations_data_2022 <- selected_twostations %>%
  filter(Year == 2022)
twostations_data_2023 <- selected_twostations %>%
  filter(Year == 2023)

p1 <- plot_ly(data = twostations_data_2021,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(title = list(text = "2021"),
         xaxis = list(title = "2021"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = TRUE) 

p2 <- plot_ly(data = twostations_data_2022,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(xaxis = list(title = "2022"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = FALSE)

p3 <- plot_ly(data = twostations_data_2023,
             x = ~Station,
             y = ~`Mean Temperature (°C)`,
         box = list(visible = T),
         meanline = list(visible = T, 
                         color = "darkblue"),
        type = "violin",
        spanmode = 'hard',
        marker = list(opacity = 0.5, 
                      color = 'lightblue',
                      line = list(width = 0.5, 
                                  color = 'darkblue')), 
        scalemode = 'count',
        color = ~Station,  
        hoveron = "points+kde",
        line = list(width=1)) %>%
  layout(xaxis = list(title = "2023"),
         yaxis = list(title = "Mean Temperature (°C)"),
         showlegend = FALSE)

subplot(p1, p2, p3, 
        nrows = 1, 
        shareX = TRUE, 
        shareY = TRUE) %>%
  layout(title = "Mean Temperature in Station(s) across the years 2021 to 2023")

```

## 4.2 Daily Rainfall Total (mm)

### 4.2.1 Station(s) Across the specified Year

```{r}
# User define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

p1 <- ggplot(allstations_year, 
             aes(x = Station, y = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(color = `Daily Rainfall Total (mm)`,
                 text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:',`Daily Rainfall Total (mm)`)),
             size=2.5) +
  labs(title = paste("Daily Rainfall across all Stations in", selected_year),
       x = "Station",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")


ggplotly(p1, tooltip = "text") %>%
  layout( xaxis = list(tickangle = 45,
      tickfont = list(size = 12)),
      hovermode = 'closest') %>%
  config(displayModeBar = FALSE)

```

### 4.2.2 One Station Across Different Years

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

p1 <- ggplot(onestation_data,
             aes(x = Year, y = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(color = `Daily Rainfall Total (mm)`,
                 text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:',`Daily Rainfall Total (mm)`)),
             size=2.5) +
  labs(title = "Daily Rainfall in Station(s) across the years 2021 to 2023",
       x = "Year",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")+
  scale_x_continuous(breaks = seq(2021, 2023, by = 1)) 

ggplotly(p1, tooltip = "text") %>%
  layout(hovermode = 'closest') %>%
  config(displayModeBar = FALSE)
```

### 4.1.3 Multiple Station Across Different Years

```{r}
p <- ggplot(selected_twostations, 
            aes(x = Station, y = `Daily Rainfall Total (mm)`, 
                color = `Daily Rainfall Total (mm)`)) +
  geom_point(aes(text = paste('Year:', Year,'Month:',Month,'Day:', Day,
                              'Rainfall:', `Daily Rainfall Total (mm)`)), size = 2.5) +
  facet_wrap(~Year, ncol = 1) +
  labs(title = "Daily Rainfall in Station(s) across the years 2021 to 2023",
       x = "Station",
       y = "Daily Rainfall Total (mm)") +
  theme_minimal() +
  scale_color_gradient(low = "lightblue", high = "darkblue")


ggplotly(p, tooltip = "text") %>%
  layout(hovermode = 'closest') %>%
  config(displayModeBar = FALSE)

```

## 4.3 UI Design

![](images/clipboard-1967767980.png)

![](images/clipboard-599838417.png)

![](images/clipboard-665354853.png)

# 5 Confirmatory Data Analysis

## 5.1 Mean Temperature (°C)

### 5.1.1 Compare Station(s) Across the specified Year

[**Anova test**]{.underline}

Hypothesis

H0 : Daily mean temperature in 2021 across different stations are equal

H1 : Daily mean temperature in 2021 across different station are not equal

```{r}
#| fig-width: 12
#| fig-height: 5

# User define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

ggbetweenstats(data = allstations_year,
  x = Station,
  y = `Mean Temperature (°C)`,
  type="np", # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE,
  title = paste("Mean Temperature across all Stations in", selected_year))

```

### 5.1.2 One Station Across Different Years

[**Anova test**]{.underline}

Hypothesis

H0 : Daily mean temperature in Ang Mo Kio across different years are equal

H1 : Daily mean temperature in Ang Mo Kio across different years are not equal

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

ggbetweenstats(data = onestation_data,
  x = Year,
  y = `Mean Temperature (°C)`,
  type="np", # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE,
  title = "Mean Temperature in Station(s) across the years 2021 to 2023")

```

### 5.1.3 Multiple Station Across Different Years

## 5.2 Daily Rainfall Total (mm)

## 5.2.1 Across different stations for a specific year

[**Anova test**]{.underline}

Hypothesis

H0 : Daily Rainfall in 2021 across different stations are equal

H1 : Daily Rainfall in 2021 across different station are not equal

```{r}
#| fig-width: 12
#| fig-height: 5

# User define the year
selected_year <- "2021"

#Filter data for the specified year
allstations_year <- weather %>%    
  group_by(Station) %>%           
  filter(Year == selected_year)

ggbetweenstats(data = allstations_year,
  x = Station,
  y = `Daily Rainfall Total (mm)`,
  type="np", # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE,
  title = paste("Daily Rainfall across all Stations in", selected_year))

```

## 5.2.2 Specific station across different years

[**Anova test**]{.underline}

Hypothesis

H0 : Daily Rainfall in Ang Mo Kio across different years are equal

H1 : Daily Rainfall in Ang Mo Kio across different years are not equal

```{r}
selected_onestation <- "Ang Mo Kio"

#Filter Ang Mo Kio data
onestation_data <- weather %>%    
  filter(Station == selected_onestation)

ggbetweenstats(data = onestation_data,
  x = Year,
  y = `Daily Rainfall Total (mm)`,
  type="np", # for non-parametric
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.annotation = FALSE,
  pairwise.display = "none", 
  sig.level = NA,
  p.adjust.method = "fdr",
  messages = FALSE,
  title = "Daily Rainfall in Station(s) across the years 2021 to 2023")

```

### 5.2.3 Multiple Station Across Different Years

## 5.3 UI Design
